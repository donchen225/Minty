(self.webpackChunkminty=self.webpackChunkminty||[]).push([[513],{66419:(t,e,r)=>{t.exports=r(27698)},41511:(t,e,r)=>{t.exports=r(83363)},11128:(t,e,r)=>{t.exports=r(57784)},54103:(t,e,r)=>{t.exports=r(28196)},77766:(t,e,r)=>{t.exports=r(8065)},10062:(t,e,r)=>{t.exports=r(29455)},44494:(t,e,r)=>{t.exports=r(69743)},20116:(t,e,r)=>{t.exports=r(11955)},78914:(t,e,r)=>{t.exports=r(46279)},78580:(t,e,r)=>{t.exports=r(33778)},81643:(t,e,r)=>{t.exports=r(19373)},2991:(t,e,r)=>{t.exports=r(61798)},32366:(t,e,r)=>{t.exports=r(52527)},97093:(t,e,r)=>{t.exports=r(28427)},3649:(t,e,r)=>{t.exports=r(82073)},77149:(t,e,r)=>{t.exports=r(45286)},29828:(t,e,r)=>{t.exports=r(35178)},25843:(t,e,r)=>{t.exports=r(76361)},89400:(t,e,r)=>{t.exports=r(62908)},39392:(t,e,r)=>{t.exports=r(15868)},20368:(t,e,r)=>{t.exports=r(57396)},63978:(t,e,r)=>{t.exports=r(41910)},34074:(t,e,r)=>{t.exports=r(79427)},39649:(t,e,r)=>{t.exports=r(62857)},14310:(t,e,r)=>{t.exports=r(9534)},86902:(t,e,r)=>{t.exports=r(23059)},31238:(t,e,r)=>{t.exports=r(66877)},94198:(t,e,r)=>{t.exports=r(74888)},93476:(t,e,r)=>{t.exports=r(27460)},9e4:(t,e,r)=>{t.exports=r(5889)},1068:(t,e,r)=>{t.exports=r(61895)},12513:(t,e,r)=>{t.exports=r(50636)},83275:(t,e,r)=>{t.exports=r(92388)},65420:(t,e,r)=>{t.exports=r(92547)},53592:(t,e,r)=>{t.exports=r(27385)},78363:(t,e,r)=>{t.exports=r(81522)},19996:(t,e,r)=>{t.exports=r(32209)},16976:(t,e,r)=>{t.exports=r(1258)},95238:(t,e,r)=>{t.exports=r(81493)},189:(t,e,r)=>{t.exports=r(76094)},44341:(t,e,r)=>{t.exports=r(73685)},58377:(t,e,r)=>{t.exports=r(27533)},24889:(t,e,r)=>{t.exports=r(74303)},79542:(t,e,r)=>{t.exports=r(55122)},69798:(t,e,r)=>{t.exports=r(29531)},83863:(t,e,r)=>{t.exports=r(31524)},51446:(t,e,r)=>{t.exports=r(86600)},23882:(t,e,r)=>{t.exports=r(9759)},63109:(t,e,r)=>{t.exports=r(35666)},95513:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AElement:()=>en,AnimateColorElement:()=>Qr,AnimateElement:()=>qr,AnimateTransformElement:()=>Wr,BoundingBox:()=>kr,CB1:()=>Qe,CB2:()=>We,CB3:()=>Ge,CB4:()=>$e,Canvg:()=>_n,CircleElement:()=>_r,ClipPathElement:()=>xn,DefsElement:()=>Fr,DescElement:()=>Pn,Document:()=>Mn,Element:()=>mr,EllipseElement:()=>Vr,FeColorMatrixElement:()=>gn,FeCompositeElement:()=>An,FeDropShadowElement:()=>Sn,FeGaussianBlurElement:()=>kn,FeMorphologyElement:()=>wn,FilterElement:()=>bn,Font:()=>Ar,FontElement:()=>$r,FontFaceElement:()=>Zr,GElement:()=>Br,GlyphElement:()=>Jr,GradientElement:()=>Ur,ImageElement:()=>sn,LineElement:()=>Dr,LinearGradientElement:()=>Hr,MarkerElement:()=>jr,MaskElement:()=>dn,Matrix:()=>pr,MissingGlyphElement:()=>Kr,Mouse:()=>nr,PSEUDO_ZERO:()=>He,Parser:()=>cr,PathElement:()=>Mr,PathParser:()=>Er,PatternElement:()=>zr,Point:()=>rr,PolygonElement:()=>Lr,PolylineElement:()=>Ir,Property:()=>tr,QB1:()=>Ze,QB2:()=>Ke,QB3:()=>Je,RadialGradientElement:()=>Xr,RectElement:()=>Rr,RenderedElement:()=>Tr,Rotate:()=>fr,SVGElement:()=>Nr,SVGFontLoader:()=>cn,Scale:()=>hr,Screen:()=>or,Skew:()=>vr,SkewX:()=>yr,SkewY:()=>gr,StopElement:()=>Yr,StyleElement:()=>ln,SymbolElement:()=>un,TRefElement:()=>tn,TSpanElement:()=>Or,TextElement:()=>Pr,TextPathElement:()=>on,TitleElement:()=>Tn,Transform:()=>dr,Translate:()=>lr,UnknownElement:()=>xr,UseElement:()=>fn,ViewPort:()=>er,compressSpaces:()=>Pe,default:()=>Dn,getSelectorSpecificity:()=>Ue,normalizeAttributeName:()=>Ne,normalizeColor:()=>_e,parseExternalUrl:()=>Re,presets:()=>Vn,toNumbers:()=>Ee,trimLeft:()=>Oe,trimRight:()=>Ce,vectorMagnitude:()=>Xe,vectorsAngle:()=>qe,vectorsRatio:()=>Ye});var n=r(29828),i=r.n(n),a=r(31238),o=r.n(a),s=r(2991),u=r.n(s),c=r(78363),l=r(51446),f=r(19996),h=r.n(f),p=r(95238),v=r(53592);function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function g(t,e){var r;if(t){if("string"==typeof t)return y(t,e);var n=p(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?v(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(t,e):void 0}}function d(t,e){return function(t){if(c(t))return t}(t)||function(t,e){var r=t&&(void 0!==l&&f(t)||t["@@iterator"]);if(null!=r){var n,i,a=[],o=!0,s=!1;try{for(r=r.call(t);!(o=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);o=!0);}catch(t){s=!0,i=t}finally{try{o||null==r.return||r.return()}finally{if(s)throw i}}return a}}(t,e)||g(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var m=r(63978),x=r.n(m),b=r(20368),S=r.n(b),w=r(39649),A=r.n(w),k=r(78914),T=r.n(k),P=r(34074),O=r.n(P),C=r(20116),E=r.n(C),M=r(14310),N=r.n(M),R=r(86902),_=r.n(R),V=r(63109),D=r.n(V),I=r(69798);function L(t,e,r,n,i,a,o){try{var s=t[a](o),u=s.value}catch(t){return void r(t)}s.done?e(u):I.resolve(u).then(n,i)}function z(t){return function(){var e=this,r=arguments;return new I((function(n,i){var a=t.apply(e,r);function o(t){L(a,n,i,o,s,"next",t)}function s(t){L(a,n,i,o,s,"throw",t)}o(void 0)}))}}var j=r(44341);function F(t,e,r){return e in t?j(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function B(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function U(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),j(t,n.key,n)}}function H(t,e,r){return e&&U(t.prototype,e),r&&U(t,r),t}var X=r(77766),Y=r.n(X),q=r(32366),Q=r.n(q),W=r(11128),G=r.n(W),$=r(10062),Z=r.n($),K=r(93476),J=r.n(K),tt=r(54103),et=r.n(tt),rt=r(54087),nt=r.n(rt),it=r(25843),at=r.n(it),ot=r(26131),st=r.n(ot),ut=r(1068),ct=r.n(ut),lt=r(189),ft=r(79542);function ht(t,e){return(ht=ft||function(t,e){return t.__proto__=e,t})(t,e)}function pt(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=lt(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ht(t,e)}var vt=r(23882);function yt(t){return(yt="function"==typeof l&&"symbol"==typeof vt?function(t){return typeof t}:function(t){return t&&"function"==typeof l&&t.constructor===l&&t!==l.prototype?"symbol":typeof t})(t)}function gt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function dt(t,e){return!e||"object"!==yt(e)&&"function"!=typeof e?gt(t):e}var mt=r(24889);function xt(t){return(xt=ft?mt:function(t){return t.__proto__||mt(t)})(t)}var bt=r(77149),St=r.n(bt),wt=r(78580),At=r.n(wt),kt=r(66419),Tt=r.n(kt),Pt=r(97093),Ot=r.n(Pt),Ct=r(81643),Et=r.n(Ct),Mt=r(83863),Nt=r(58377);function Rt(t,e,r){return(Rt="undefined"!=typeof Reflect&&Mt?Mt:function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=xt(t)););return t}(t,e);if(n){var i=Nt(n,e);return i.get?i.get.call(r):i.value}})(t,e,r||t)}var _t=r(44494),Vt=r.n(_t),Dt=function(t,e){return(Dt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function It(t,e){function r(){this.constructor=t}Dt(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function Lt(t,e){var r=t[0],n=t[1];return[r*Math.cos(e)-n*Math.sin(e),r*Math.sin(e)+n*Math.cos(e)]}function zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var jt=Math.PI;function Ft(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var n=t.rX,i=t.rY,a=t.x,o=t.y;n=Math.abs(t.rX),i=Math.abs(t.rY);var s=Lt([(e-a)/2,(r-o)/2],-t.xRot/180*jt),u=s[0],c=s[1],l=Math.pow(u,2)/Math.pow(n,2)+Math.pow(c,2)/Math.pow(i,2);1<l&&(n*=Math.sqrt(l),i*=Math.sqrt(l)),t.rX=n,t.rY=i;var f=Math.pow(n,2)*Math.pow(c,2)+Math.pow(i,2)*Math.pow(u,2),h=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(n,2)*Math.pow(i,2)-f)/f)),p=n*c/i*h,v=-i*u/n*h,y=Lt([p,v],t.xRot/180*jt);t.cX=y[0]+(e+a)/2,t.cY=y[1]+(r+o)/2,t.phi1=Math.atan2((c-v)/i,(u-p)/n),t.phi2=Math.atan2((-c-v)/i,(-u-p)/n),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*jt),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*jt),t.phi1*=180/jt,t.phi2*=180/jt}function Bt(t,e,r){zt(t,e,r);var n=t*t+e*e-r*r;if(0>n)return[];if(0===n)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var i=Math.sqrt(n);return[[(t*r+e*i)/(t*t+e*e),(e*r-t*i)/(t*t+e*e)],[(t*r-e*i)/(t*t+e*e),(e*r+t*i)/(t*t+e*e)]]}var Ut,Ht=Math.PI/180;function Xt(t,e,r){return(1-r)*t+r*e}function Yt(t,e,r,n){return t+Math.cos(n/180*jt)*e+Math.sin(n/180*jt)*r}function qt(t,e,r,n){var i=e-t,a=r-e,o=3*i+3*(n-r)-6*a,s=6*(a-i),u=3*i;return Math.abs(o)<1e-6?[-u/s]:function(t,e,r){void 0===r&&(r=1e-6);var n=t*t/4-e;if(n<-r)return[];if(n<=r)return[-t/2];var i=Math.sqrt(n);return[-t/2-i,-t/2+i]}(s/o,u/o,1e-6)}function Qt(t,e,r,n,i){var a=1-i;return t*(a*a*a)+e*(3*a*a*i)+r*(3*a*i*i)+n*(i*i*i)}!function(t){function e(){return i((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,n=NaN;return i((function(i,a,o){return i.type&Jt.SMOOTH_CURVE_TO&&(i.type=Jt.CURVE_TO,t=isNaN(t)?a:t,e=isNaN(e)?o:e,i.x1=i.relative?a-t:2*a-t,i.y1=i.relative?o-e:2*o-e),i.type&Jt.CURVE_TO?(t=i.relative?a+i.x2:i.x2,e=i.relative?o+i.y2:i.y2):(t=NaN,e=NaN),i.type&Jt.SMOOTH_QUAD_TO&&(i.type=Jt.QUAD_TO,r=isNaN(r)?a:r,n=isNaN(n)?o:n,i.x1=i.relative?a-r:2*a-r,i.y1=i.relative?o-n:2*o-n),i.type&Jt.QUAD_TO?(r=i.relative?a+i.x1:i.x1,n=i.relative?o+i.y1:i.y1):(r=NaN,n=NaN),i}))}function n(){var t=NaN,e=NaN;return i((function(r,n,i){if(r.type&Jt.SMOOTH_QUAD_TO&&(r.type=Jt.QUAD_TO,t=isNaN(t)?n:t,e=isNaN(e)?i:e,r.x1=r.relative?n-t:2*n-t,r.y1=r.relative?i-e:2*i-e),r.type&Jt.QUAD_TO){t=r.relative?n+r.x1:r.x1,e=r.relative?i+r.y1:r.y1;var a=r.x1,o=r.y1;r.type=Jt.CURVE_TO,r.x1=((r.relative?0:n)+2*a)/3,r.y1=((r.relative?0:i)+2*o)/3,r.x2=(r.x+2*a)/3,r.y2=(r.y+2*o)/3}else t=NaN,e=NaN;return r}))}function i(t){var e=0,r=0,n=NaN,i=NaN;return function(a){if(isNaN(n)&&!(a.type&Jt.MOVE_TO))throw new Error("path must start with moveto");var o=t(a,e,r,n,i);return a.type&Jt.CLOSE_PATH&&(e=n,r=i),void 0!==a.x&&(e=a.relative?e+a.x:a.x),void 0!==a.y&&(r=a.relative?r+a.y:a.y),a.type&Jt.MOVE_TO&&(n=e,i=r),o}}function a(t,e,r,n,a,o){return zt(t,e,r,n,a,o),i((function(i,s,u,c){var l=i.x1,f=i.x2,h=i.relative&&!isNaN(c),p=void 0!==i.x?i.x:h?0:s,v=void 0!==i.y?i.y:h?0:u;function y(t){return t*t}i.type&Jt.HORIZ_LINE_TO&&0!==e&&(i.type=Jt.LINE_TO,i.y=i.relative?0:u),i.type&Jt.VERT_LINE_TO&&0!==r&&(i.type=Jt.LINE_TO,i.x=i.relative?0:s),void 0!==i.x&&(i.x=i.x*t+v*r+(h?0:a)),void 0!==i.y&&(i.y=p*e+i.y*n+(h?0:o)),void 0!==i.x1&&(i.x1=i.x1*t+i.y1*r+(h?0:a)),void 0!==i.y1&&(i.y1=l*e+i.y1*n+(h?0:o)),void 0!==i.x2&&(i.x2=i.x2*t+i.y2*r+(h?0:a)),void 0!==i.y2&&(i.y2=f*e+i.y2*n+(h?0:o));var g=t*n-e*r;if(void 0!==i.xRot&&(1!==t||0!==e||0!==r||1!==n))if(0===g)delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag,i.type=Jt.LINE_TO;else{var d=i.xRot*Math.PI/180,m=Math.sin(d),x=Math.cos(d),b=1/y(i.rX),S=1/y(i.rY),w=y(x)*b+y(m)*S,A=2*m*x*(b-S),k=y(m)*b+y(x)*S,T=w*n*n-A*e*n+k*e*e,P=A*(t*n+e*r)-2*(w*r*n+k*t*e),O=w*r*r-A*t*r+k*t*t,C=(Math.atan2(P,T-O)+Math.PI)%Math.PI/2,E=Math.sin(C),M=Math.cos(C);i.rX=Math.abs(g)/Math.sqrt(T*y(M)+P*E*M+O*y(E)),i.rY=Math.abs(g)/Math.sqrt(T*y(E)-P*E*M+O*y(M)),i.xRot=180*C/Math.PI}return void 0!==i.sweepFlag&&0>g&&(i.sweepFlag=+!i.sweepFlag),i}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),zt(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return i((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),i((function(n,i,a,o,s){if(isNaN(o)&&!(n.type&Jt.MOVE_TO))throw new Error("path must start with moveto");return e&&n.type&Jt.HORIZ_LINE_TO&&(n.type=Jt.LINE_TO,n.y=n.relative?0:a),r&&n.type&Jt.VERT_LINE_TO&&(n.type=Jt.LINE_TO,n.x=n.relative?0:i),t&&n.type&Jt.CLOSE_PATH&&(n.type=Jt.LINE_TO,n.x=n.relative?o-i:o,n.y=n.relative?s-a:s),n.type&Jt.ARC&&(0===n.rX||0===n.rY)&&(n.type=Jt.LINE_TO,delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag),n}))},t.NORMALIZE_ST=r,t.QT_TO_C=n,t.INFO=i,t.SANITIZE=function(t){void 0===t&&(t=0),zt(t);var e=NaN,r=NaN,n=NaN,a=NaN;return i((function(i,o,s,u,c){var l=Math.abs,f=!1,h=0,p=0;if(i.type&Jt.SMOOTH_CURVE_TO&&(h=isNaN(e)?0:o-e,p=isNaN(r)?0:s-r),i.type&(Jt.CURVE_TO|Jt.SMOOTH_CURVE_TO)?(e=i.relative?o+i.x2:i.x2,r=i.relative?s+i.y2:i.y2):(e=NaN,r=NaN),i.type&Jt.SMOOTH_QUAD_TO?(n=isNaN(n)?o:2*o-n,a=isNaN(a)?s:2*s-a):i.type&Jt.QUAD_TO?(n=i.relative?o+i.x1:i.x1,a=i.relative?s+i.y1:i.y2):(n=NaN,a=NaN),i.type&Jt.LINE_COMMANDS||i.type&Jt.ARC&&(0===i.rX||0===i.rY||!i.lArcFlag)||i.type&Jt.CURVE_TO||i.type&Jt.SMOOTH_CURVE_TO||i.type&Jt.QUAD_TO||i.type&Jt.SMOOTH_QUAD_TO){var v=void 0===i.x?0:i.relative?i.x:i.x-o,y=void 0===i.y?0:i.relative?i.y:i.y-s;h=isNaN(n)?void 0===i.x1?h:i.relative?i.x:i.x1-o:n-o,p=isNaN(a)?void 0===i.y1?p:i.relative?i.y:i.y1-s:a-s;var g=void 0===i.x2?0:i.relative?i.x:i.x2-o,d=void 0===i.y2?0:i.relative?i.y:i.y2-s;l(v)<=t&&l(y)<=t&&l(h)<=t&&l(p)<=t&&l(g)<=t&&l(d)<=t&&(f=!0)}return i.type&Jt.CLOSE_PATH&&l(o-u)<=t&&l(s-c)<=t&&(f=!0),f?[]:i}))},t.MATRIX=a,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),zt(t,e,r);var n=Math.sin(t),i=Math.cos(t);return a(i,n,-n,i,e-e*i+r*n,r-e*n-r*i)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),zt(t,e),a(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),zt(t,e),a(t,0,0,e,0,0)},t.SKEW_X=function(t){return zt(t),a(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return zt(t),a(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),zt(t),a(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),zt(t),a(1,0,0,-1,0,t)},t.A_TO_C=function(){return i((function(t,e,r){return Jt.ARC===t.type?function(t,e,r){var n,i,a,o;t.cX||Ft(t,e,r);for(var s=Math.min(t.phi1,t.phi2),u=Math.max(t.phi1,t.phi2)-s,c=Math.ceil(u/90),l=new Array(c),f=e,h=r,p=0;p<c;p++){var v=Xt(t.phi1,t.phi2,p/c),y=Xt(t.phi1,t.phi2,(p+1)/c),g=y-v,d=4/3*Math.tan(g*Ht/4),m=[Math.cos(v*Ht)-d*Math.sin(v*Ht),Math.sin(v*Ht)+d*Math.cos(v*Ht)],x=m[0],b=m[1],S=[Math.cos(y*Ht),Math.sin(y*Ht)],w=S[0],A=S[1],k=[w+d*Math.sin(y*Ht),A-d*Math.cos(y*Ht)],T=k[0],P=k[1];l[p]={relative:t.relative,type:Jt.CURVE_TO};var O=function(e,r){var n=Lt([e*t.rX,r*t.rY],t.xRot),i=n[0],a=n[1];return[t.cX+i,t.cY+a]};n=O(x,b),l[p].x1=n[0],l[p].y1=n[1],i=O(T,P),l[p].x2=i[0],l[p].y2=i[1],a=O(w,A),l[p].x=a[0],l[p].y=a[1],t.relative&&(l[p].x1-=f,l[p].y1-=h,l[p].x2-=f,l[p].y2-=h,l[p].x-=f,l[p].y-=h),f=(o=[l[p].x,l[p].y])[0],h=o[1]}return l}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return i((function(t,e,r){return t.relative&&(e=0,r=0),Jt.ARC===t.type&&Ft(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),a=n(),o=r(),s=i((function(e,r,n){var i=o(a(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function u(t){t>s.maxX&&(s.maxX=t),t<s.minX&&(s.minX=t)}function c(t){t>s.maxY&&(s.maxY=t),t<s.minY&&(s.minY=t)}if(i.type&Jt.DRAWING_COMMANDS&&(u(r),c(n)),i.type&Jt.HORIZ_LINE_TO&&u(i.x),i.type&Jt.VERT_LINE_TO&&c(i.y),i.type&Jt.LINE_TO&&(u(i.x),c(i.y)),i.type&Jt.CURVE_TO){u(i.x),c(i.y);for(var l=0,f=qt(r,i.x1,i.x2,i.x);l<f.length;l++)0<(O=f[l])&&1>O&&u(Qt(r,i.x1,i.x2,i.x,O));for(var h=0,p=qt(n,i.y1,i.y2,i.y);h<p.length;h++)0<(O=p[h])&&1>O&&c(Qt(n,i.y1,i.y2,i.y,O))}if(i.type&Jt.ARC){u(i.x),c(i.y),Ft(i,r,n);for(var v=i.xRot/180*Math.PI,y=Math.cos(v)*i.rX,g=Math.sin(v)*i.rX,d=-Math.sin(v)*i.rY,m=Math.cos(v)*i.rY,x=i.phi1<i.phi2?[i.phi1,i.phi2]:-180>i.phi2?[i.phi2+360,i.phi1+360]:[i.phi2,i.phi1],b=x[0],S=x[1],w=function(t){var e=t[0],r=t[1],n=180*Math.atan2(r,e)/Math.PI;return n<b?n+360:n},A=0,k=Bt(d,-y,0).map(w);A<k.length;A++)(O=k[A])>b&&O<S&&u(Yt(i.cX,y,d,O));for(var T=0,P=Bt(m,-g,0).map(w);T<P.length;T++){var O;(O=P[T])>b&&O<S&&c(Yt(i.cY,g,m,O))}}return e}));return s.minX=1/0,s.maxX=-1/0,s.minY=1/0,s.maxY=-1/0,s}}(Ut||(Ut={}));var Wt,Gt=function(){function t(){}return t.prototype.round=function(t){return this.transform(Ut.ROUND(t))},t.prototype.toAbs=function(){return this.transform(Ut.TO_ABS())},t.prototype.toRel=function(){return this.transform(Ut.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(Ut.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(Ut.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(Ut.QT_TO_C())},t.prototype.aToC=function(){return this.transform(Ut.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(Ut.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(Ut.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(Ut.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(Ut.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,n,i,a){return this.transform(Ut.MATRIX(t,e,r,n,i,a))},t.prototype.skewX=function(t){return this.transform(Ut.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(Ut.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(Ut.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(Ut.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(Ut.ANNOTATE_ARCS())},t}(),$t=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},Zt=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},Kt=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return It(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var n=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},i=0;i<t.length;i++){var a=t[i],o=!(this.curCommandType!==Jt.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),s=Zt(a)&&("0"===this.curNumber&&"0"===a||o);if(!Zt(a)||s)if("e"!==a&&"E"!==a)if("-"!==a&&"+"!==a||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==a||this.curNumberHasExp||this.curNumberHasDecimal||o){if(this.curNumber&&-1!==this.curCommandType){var u=Number(this.curNumber);if(isNaN(u))throw new SyntaxError("Invalid number ending at "+i);if(this.curCommandType===Jt.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>u)throw new SyntaxError('Expected positive number, got "'+u+'" at index "'+i+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+i+'"');this.curArgs.push(u),this.curArgs.length===te[this.curCommandType]&&(Jt.HORIZ_LINE_TO===this.curCommandType?n({type:Jt.HORIZ_LINE_TO,relative:this.curCommandRelative,x:u}):Jt.VERT_LINE_TO===this.curCommandType?n({type:Jt.VERT_LINE_TO,relative:this.curCommandRelative,y:u}):this.curCommandType===Jt.MOVE_TO||this.curCommandType===Jt.LINE_TO||this.curCommandType===Jt.SMOOTH_QUAD_TO?(n({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),Jt.MOVE_TO===this.curCommandType&&(this.curCommandType=Jt.LINE_TO)):this.curCommandType===Jt.CURVE_TO?n({type:Jt.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===Jt.SMOOTH_CURVE_TO?n({type:Jt.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===Jt.QUAD_TO?n({type:Jt.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===Jt.ARC&&n({type:Jt.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!$t(a))if(","===a&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==a&&"-"!==a&&"."!==a)if(s)this.curNumber=a,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+i+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+a+'" at index '+i+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==a&&"Z"!==a)if("h"===a||"H"===a)this.curCommandType=Jt.HORIZ_LINE_TO,this.curCommandRelative="h"===a;else if("v"===a||"V"===a)this.curCommandType=Jt.VERT_LINE_TO,this.curCommandRelative="v"===a;else if("m"===a||"M"===a)this.curCommandType=Jt.MOVE_TO,this.curCommandRelative="m"===a;else if("l"===a||"L"===a)this.curCommandType=Jt.LINE_TO,this.curCommandRelative="l"===a;else if("c"===a||"C"===a)this.curCommandType=Jt.CURVE_TO,this.curCommandRelative="c"===a;else if("s"===a||"S"===a)this.curCommandType=Jt.SMOOTH_CURVE_TO,this.curCommandRelative="s"===a;else if("q"===a||"Q"===a)this.curCommandType=Jt.QUAD_TO,this.curCommandRelative="q"===a;else if("t"===a||"T"===a)this.curCommandType=Jt.SMOOTH_QUAD_TO,this.curCommandRelative="t"===a;else{if("a"!==a&&"A"!==a)throw new SyntaxError('Unexpected character "'+a+'" at index '+i+".");this.curCommandType=Jt.ARC,this.curCommandRelative="a"===a}else e.push({type:Jt.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=a,this.curNumberHasDecimal="."===a}else this.curNumber+=a,this.curNumberHasDecimal=!0;else this.curNumber+=a;else this.curNumber+=a,this.curNumberHasExp=!0;else this.curNumber+=a,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var n=0,i=Object.getPrototypeOf(this).parse.call(this,e);n<i.length;n++){var a=i[n],o=t(a);Array.isArray(o)?r.push.apply(r,o):r.push(o)}return r}}})},e}(Gt),Jt=function(t){function e(r){var n=t.call(this)||this;return n.commands="string"==typeof r?e.parse(r):r,n}return It(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=Ut.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,n=this.commands;r<n.length;r++){var i=t(n[r]);Array.isArray(i)?e.push.apply(e,i):e.push(i)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var n=t[r];if(n.type===Jt.CLOSE_PATH)e+="z";else if(n.type===Jt.HORIZ_LINE_TO)e+=(n.relative?"h":"H")+n.x;else if(n.type===Jt.VERT_LINE_TO)e+=(n.relative?"v":"V")+n.y;else if(n.type===Jt.MOVE_TO)e+=(n.relative?"m":"M")+n.x+" "+n.y;else if(n.type===Jt.LINE_TO)e+=(n.relative?"l":"L")+n.x+" "+n.y;else if(n.type===Jt.CURVE_TO)e+=(n.relative?"c":"C")+n.x1+" "+n.y1+" "+n.x2+" "+n.y2+" "+n.x+" "+n.y;else if(n.type===Jt.SMOOTH_CURVE_TO)e+=(n.relative?"s":"S")+n.x2+" "+n.y2+" "+n.x+" "+n.y;else if(n.type===Jt.QUAD_TO)e+=(n.relative?"q":"Q")+n.x1+" "+n.y1+" "+n.x+" "+n.y;else if(n.type===Jt.SMOOTH_QUAD_TO)e+=(n.relative?"t":"T")+n.x+" "+n.y;else{if(n.type!==Jt.ARC)throw new Error('Unexpected command type "'+n.type+'" at index '+r+".");e+=(n.relative?"a":"A")+n.rX+" "+n.rY+" "+n.xRot+" "+ +n.lArcFlag+" "+ +n.sweepFlag+" "+n.x+" "+n.y}}return e}(t)},e.parse=function(t){var e=new Kt,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(Gt),te=((Wt={})[Jt.MOVE_TO]=2,Wt[Jt.LINE_TO]=2,Wt[Jt.HORIZ_LINE_TO]=1,Wt[Jt.VERT_LINE_TO]=1,Wt[Jt.CLOSE_PATH]=0,Wt[Jt.QUAD_TO]=4,Wt[Jt.SMOOTH_QUAD_TO]=2,Wt[Jt.CURVE_TO]=6,Wt[Jt.SMOOTH_CURVE_TO]=4,Wt[Jt.ARC]=7,Wt),ee=r(12513),re=r.n(ee),ne=r(89400),ie=r.n(ne),ae=r(94198),oe=r.n(ae),se=r(16976),ue=r.n(se),ce=r(41511),le=r.n(ce),fe=r(65420),he=r.n(fe),pe=r(3649),ve=r.n(pe),ye=r(39392),ge=r.n(ye),de=r(9e4),me=r.n(de),xe=r(83275),be=r.n(xe);function Se(t){return(Se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var we=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],Ae=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function ke(t,e,r,n,i,a){if(!(isNaN(a)||a<1)){a|=0;var o=function(t,e,r,n,i){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==Se(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var a=t.getContext("2d");try{return a.getImageData(e,r,n,i)}catch(t){throw new Error("unable to access image data: "+t)}}(t,e,r,n,i);o=function(t,e,r,n,i,a){for(var o,s=t.data,u=2*a+1,c=n-1,l=i-1,f=a+1,h=f*(f+1)/2,p=new Te,v=p,y=1;y<u;y++)v=v.next=new Te,y===f&&(o=v);v.next=p;for(var g=null,d=null,m=0,x=0,b=we[a],S=Ae[a],w=0;w<i;w++){v=p;for(var A=s[x],k=s[x+1],T=s[x+2],P=s[x+3],O=0;O<f;O++)v.r=A,v.g=k,v.b=T,v.a=P,v=v.next;for(var C=0,E=0,M=0,N=0,R=f*A,_=f*k,V=f*T,D=f*P,I=h*A,L=h*k,z=h*T,j=h*P,F=1;F<f;F++){var B=x+((c<F?c:F)<<2),U=s[B],H=s[B+1],X=s[B+2],Y=s[B+3],q=f-F;I+=(v.r=U)*q,L+=(v.g=H)*q,z+=(v.b=X)*q,j+=(v.a=Y)*q,C+=U,E+=H,M+=X,N+=Y,v=v.next}g=p,d=o;for(var Q=0;Q<n;Q++){var W=j*b>>S;if(s[x+3]=W,0!==W){var G=255/W;s[x]=(I*b>>S)*G,s[x+1]=(L*b>>S)*G,s[x+2]=(z*b>>S)*G}else s[x]=s[x+1]=s[x+2]=0;I-=R,L-=_,z-=V,j-=D,R-=g.r,_-=g.g,V-=g.b,D-=g.a;var $=Q+a+1;$=m+($<c?$:c)<<2,I+=C+=g.r=s[$],L+=E+=g.g=s[$+1],z+=M+=g.b=s[$+2],j+=N+=g.a=s[$+3],g=g.next;var Z=d,K=Z.r,J=Z.g,tt=Z.b,et=Z.a;R+=K,_+=J,V+=tt,D+=et,C-=K,E-=J,M-=tt,N-=et,d=d.next,x+=4}m+=n}for(var rt=0;rt<n;rt++){var nt=s[x=rt<<2],it=s[x+1],at=s[x+2],ot=s[x+3],st=f*nt,ut=f*it,ct=f*at,lt=f*ot,ft=h*nt,ht=h*it,pt=h*at,vt=h*ot;v=p;for(var yt=0;yt<f;yt++)v.r=nt,v.g=it,v.b=at,v.a=ot,v=v.next;for(var gt=n,dt=0,mt=0,xt=0,bt=0,St=1;St<=a;St++){x=gt+rt<<2;var wt=f-St;ft+=(v.r=nt=s[x])*wt,ht+=(v.g=it=s[x+1])*wt,pt+=(v.b=at=s[x+2])*wt,vt+=(v.a=ot=s[x+3])*wt,bt+=nt,dt+=it,mt+=at,xt+=ot,v=v.next,St<l&&(gt+=n)}x=rt,g=p,d=o;for(var At=0;At<i;At++){var kt=x<<2;s[kt+3]=ot=vt*b>>S,ot>0?(ot=255/ot,s[kt]=(ft*b>>S)*ot,s[kt+1]=(ht*b>>S)*ot,s[kt+2]=(pt*b>>S)*ot):s[kt]=s[kt+1]=s[kt+2]=0,ft-=st,ht-=ut,pt-=ct,vt-=lt,st-=g.r,ut-=g.g,ct-=g.b,lt-=g.a,kt=rt+((kt=At+f)<l?kt:l)*n<<2,ft+=bt+=g.r=s[kt],ht+=dt+=g.g=s[kt+1],pt+=mt+=g.b=s[kt+2],vt+=xt+=g.a=s[kt+3],g=g.next,st+=nt=d.r,ut+=it=d.g,ct+=at=d.b,lt+=ot=d.a,bt-=nt,dt-=it,mt-=at,xt-=ot,d=d.next,x+=n}}return t}(o,0,0,n,i,a),t.getContext("2d").putImageData(o,e,r)}}var Te=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null};function Pe(t){return t.replace(/(?!\u3000)\s+/gm," ")}function Oe(t){return t.replace(/^[\n \t]+/,"")}function Ce(t){return t.replace(/[\n \t]+$/,"")}function Ee(t){var e=(t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[];return u()(e).call(e,o())}var Me=/^[A-Z-]+$/;function Ne(t){return Me.test(t)?t.toLowerCase():t}function Re(t){var e=t.match(/url\(('([^']+)'|"([^"]+)"|([^'"\)]+))\)/)||[];return e[2]||e[3]||e[4]}function _e(t){if(!i()(t).call(t,"rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,(function(t,r){return e--&&r?String(Math.round(o()(t))):t}))}var Ve=/(\[[^\]]+\])/g,De=/(#[^\s\+>~\.\[:]+)/g,Ie=/(\.[^\s\+>~\.\[:]+)/g,Le=/(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,ze=/(:[\w-]+\([^\)]*\))/gi,je=/(:[^\s\+>~\.\[:]+)/g,Fe=/([^\s\+>~\.\[:]+)/g;function Be(t,e){var r=t.match(e);return r?[t.replace(e," "),r.length]:[t,0]}function Ue(t){var e=[0,0,0],r=t.replace(/:not\(([^\)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),n=0,i=d(Be(r,Ve),2);r=i[0],n=i[1],e[1]+=n;var a=d(Be(r,De),2);r=a[0],n=a[1],e[0]+=n;var o=d(Be(r,Ie),2);r=o[0],n=o[1],e[1]+=n;var s=d(Be(r,Le),2);r=s[0],n=s[1],e[2]+=n;var u=d(Be(r,ze),2);r=u[0],n=u[1],e[1]+=n;var c=d(Be(r,je),2);r=c[0],n=c[1],e[1]+=n;var l=d(Be(r=r.replace(/[\*\s\+>~]/g," ").replace(/[#\.]/g," "),Fe),2);return r=l[0],n=l[1],e[2]+=n,e.join("")}var He=1e-8;function Xe(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function Ye(t,e){return(t[0]*e[0]+t[1]*e[1])/(Xe(t)*Xe(e))}function qe(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(Ye(t,e))}function Qe(t){return t*t*t}function We(t){return 3*t*t*(1-t)}function Ge(t){return 3*t*(1-t)*(1-t)}function $e(t){return(1-t)*(1-t)*(1-t)}function Ze(t){return t*t}function Ke(t){return 2*t*(1-t)}function Je(t){return(1-t)*(1-t)}var tr=function(){function t(e,r,n){B(this,t),this.document=e,this.name=r,this.value=n,this.isNormalizedColor=!1}return H(t,[{key:"split",value:function(){var e,r,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",i=this.document,a=this.name;return u()(e=at()(r=Pe(this.getString())).call(r).split(n)).call(e,(function(e){return new t(i,a,e)}))}},{key:"hasValue",value:function(t){var e=this.value;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}},{key:"isString",value:function(t){var e=this.value,r="string"==typeof e;return r&&t?t.test(e):r}},{key:"isUrlDefinition",value:function(){return this.isString(/^url\(/)}},{key:"isPixels",value:function(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case/px$/.test(t):case/^[0-9]+$/.test(t):return!0;default:return!1}}},{key:"setValue",value:function(t){return this.value=t,this}},{key:"getValue",value:function(t){return void 0===t||this.hasValue()?this.value:t}},{key:"getNumber",value:function(t){if(!this.hasValue())return void 0===t?0:o()(t);var e=this.value,r=o()(e);return this.isString(/%$/)&&(r/=100),r}},{key:"getString",value:function(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}},{key:"getColor",value:function(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=_e(e),this.value=e),e}},{key:"getDpi",value:function(){return 96}},{key:"getRem",value:function(){return this.document.rootEmSize}},{key:"getEm",value:function(){return this.document.emSize}},{key:"getUnits",value:function(){return this.getString().replace(/[0-9\.\-]/g,"")}},{key:"getPixels",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var r="boolean"==typeof t?[void 0,t]:[t],n=d(r,2),i=n[0],a=n[1],o=this.document.screen.viewPort;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(o.computeSize("x"),o.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(o.computeSize("x"),o.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*o.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*o.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&a:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*o.computeSize(i);default:var s=this.getNumber();return e&&s<1?s*o.computeSize(i):s}}},{key:"getMilliseconds",value:function(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}},{key:"getRadians",value:function(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}},{key:"getDefinition",value:function(){var t=this.getString(),e=t.match(/#([^\)'"]+)/);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}},{key:"getFillStyleDefinition",value:function(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var n=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),n.hasValue()&&r.getAttribute("patternTransform",!0).setValue(n.value)}return r.createPattern(this.document.ctx,t,e)}return null}},{key:"getTextBaseline",value:function(){return this.hasValue()?t.textBaselineMapping[this.getString()]:null}},{key:"addOpacity",value:function(e){for(var r=this.getColor(),n=r.length,i=0,a=0;a<n&&(","===r[a]&&i++,3!==i);a++);if(e.hasValue()&&this.isString()&&3!==i){var o=new(st())(r);o.ok&&(o.alpha=e.getNumber(),r=o.toRGBA())}return new t(this.document,this.name,r)}}],[{key:"empty",value:function(e){return new t(e,"EMPTY","")}}]),t}();tr.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};var er=function(){function t(){B(this,t),this.viewPorts=[]}return H(t,[{key:"clear",value:function(){this.viewPorts=[]}},{key:"setCurrent",value:function(t,e){this.viewPorts.push({width:t,height:e})}},{key:"removeCurrent",value:function(){this.viewPorts.pop()}},{key:"getCurrent",value:function(){var t=this.viewPorts;return t[t.length-1]}},{key:"computeSize",value:function(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}},{key:"width",get:function(){return this.getCurrent().width}},{key:"height",get:function(){return this.getCurrent().height}}]),t}(),rr=function(){function t(e,r){B(this,t),this.x=e,this.y=r}return H(t,[{key:"angleTo",value:function(t){return Math.atan2(t.y-this.y,t.x-this.x)}},{key:"applyTransform",value:function(t){var e=this.x,r=this.y,n=e*t[0]+r*t[2]+t[4],i=e*t[1]+r*t[3]+t[5];this.x=n,this.y=i}}],[{key:"parse",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=Ee(e),i=d(n,2),a=i[0],o=void 0===a?r:a,s=i[1],u=void 0===s?r:s;return new t(o,u)}},{key:"parseScale",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=Ee(e),i=d(n,2),a=i[0],o=void 0===a?r:a,s=i[1],u=void 0===s?o:s;return new t(o,u)}},{key:"parsePath",value:function(e){for(var r=Ee(e),n=r.length,i=[],a=0;a<n;a+=2)i.push(new t(r[a],r[a+1]));return i}}]),t}(),nr=function(){function t(e){var r,n;B(this,t),this.screen=e,this.working=!1,this.events=[],this.eventElements=[],this.onClick=et()(r=this.onClick).call(r,this),this.onMouseMove=et()(n=this.onMouseMove).call(n,this)}return H(t,[{key:"isWorking",value:function(){return this.working}},{key:"start",value:function(){if(!this.working){var t=this.screen,e=this.onClick,r=this.onMouseMove,n=t.ctx.canvas;n.onclick=e,n.onmousemove=r,this.working=!0}}},{key:"stop",value:function(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}},{key:"hasEvents",value:function(){return this.working&&this.events.length>0}},{key:"runEvents",value:function(){if(this.working){var t=this.screen,e=this.events,r=this.eventElements,n=t.ctx.canvas.style;n&&(n.cursor=""),T()(e).call(e,(function(t,e){for(var n=t.run,i=r[e];i;)n(i),i=i.parent})),this.events=[],this.eventElements=[]}}},{key:"checkPath",value:function(t,e){if(this.working&&e){var r=this.events,n=this.eventElements;T()(r).call(r,(function(r,i){var a=r.x,o=r.y;!n[i]&&e.isPointInPath&&e.isPointInPath(a,o)&&(n[i]=t)}))}}},{key:"checkBoundingBox",value:function(t,e){if(this.working&&e){var r=this.events,n=this.eventElements;T()(r).call(r,(function(r,i){var a=r.x,o=r.y;!n[i]&&e.isPointInBox(a,o)&&(n[i]=t)}))}}},{key:"mapXY",value:function(t,e){for(var r=this.screen,n=r.window,i=r.ctx,a=new rr(t,e),o=i.canvas;o;)a.x-=o.offsetLeft,a.y-=o.offsetTop,o=o.offsetParent;return n.scrollX&&(a.x+=n.scrollX),n.scrollY&&(a.y+=n.scrollY),a}},{key:"onClick",value:function(t){var e=this.mapXY((t||event).clientX,(t||event).clientY),r=e.x,n=e.y;this.events.push({type:"onclick",x:r,y:n,run:function(t){t.onClick&&t.onClick()}})}},{key:"onMouseMove",value:function(t){var e=this.mapXY((t||event).clientX,(t||event).clientY),r=e.x,n=e.y;this.events.push({type:"onmousemove",x:r,y:n,run:function(t){t.onMouseMove&&t.onMouseMove()}})}}]),t}(),ir="undefined"!=typeof window?window:null,ar="undefined"!=typeof fetch?et()(fetch).call(fetch,void 0):null,or=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.fetch,i=void 0===n?ar:n,a=r.window,o=void 0===a?ir:a;B(this,t),this.ctx=e,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new er,this.mouse=new nr(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=o,this.fetch=i}return H(t,[{key:"wait",value:function(t){this.waits.push(t)}},{key:"ready",value:function(){return this.readyPromise?this.readyPromise:J().resolve()}},{key:"isReady",value:function(){var t;if(this.isReadyLock)return!0;var e=Z()(t=this.waits).call(t,(function(t){return t()}));return e&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=e,e}},{key:"setDefaults",value:function(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}},{key:"setViewBox",value:function(t){var e=t.document,r=t.ctx,n=t.aspectRatio,i=t.width,a=t.desiredWidth,o=t.height,s=t.desiredHeight,u=t.minX,c=void 0===u?0:u,l=t.minY,f=void 0===l?0:l,h=t.refX,p=t.refY,v=t.clip,y=void 0!==v&&v,g=t.clipX,m=void 0===g?0:g,x=t.clipY,b=void 0===x?0:x,S=d(Pe(n).replace(/^defer\s/,"").split(" "),2),w=S[0]||"xMidYMid",A=S[1]||"meet",k=i/a,T=o/s,P=Math.min(k,T),O=Math.max(k,T),C=a,E=s;"meet"===A&&(C*=P,E*=P),"slice"===A&&(C*=O,E*=O);var M=new tr(e,"refX",h),N=new tr(e,"refY",p),R=M.hasValue()&&N.hasValue();if(R&&r.translate(-P*M.getPixels("x"),-P*N.getPixels("y")),y){var _=P*m,V=P*b;r.beginPath(),r.moveTo(_,V),r.lineTo(i,V),r.lineTo(i,o),r.lineTo(_,o),r.closePath(),r.clip()}if(!R){var D="meet"===A&&P===T,I="slice"===A&&O===T,L="meet"===A&&P===k,z="slice"===A&&O===k;/^xMid/.test(w)&&(D||I)&&r.translate(i/2-C/2,0),/YMid$/.test(w)&&(L||z)&&r.translate(0,o/2-E/2),/^xMax/.test(w)&&(D||I)&&r.translate(i-C,0),/YMax$/.test(w)&&(L||z)&&r.translate(0,o-E)}switch(!0){case"none"===w:r.scale(k,T);break;case"meet"===A:r.scale(P,P);break;case"slice"===A:r.scale(O,O)}r.translate(-c,-f)}},{key:"start",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.enableRedraw,i=void 0!==n&&n,a=r.ignoreMouse,o=void 0!==a&&a,s=r.ignoreAnimation,u=void 0!==s&&s,c=r.ignoreDimensions,l=void 0!==c&&c,f=r.ignoreClear,h=void 0!==f&&f,p=r.forceRedraw,v=r.scaleWidth,y=r.scaleHeight,g=r.offsetX,d=r.offsetY,m=this.FRAMERATE,x=this.mouse,b=1e3/m;if(this.frameDuration=b,this.readyPromise=new(J())((function(t){e.resolveReady=t})),this.isReady()&&this.render(t,l,h,v,y,g,d),i){var S=G()(),w=S,A=0,k=function r(){S=G()(),(A=S-w)>=b&&(w=S-A%b,e.shouldUpdate(u,p)&&(e.render(t,l,h,v,y,g,d),x.runEvents())),e.intervalId=nt()(r)};o||x.start(),this.intervalId=nt()(k)}}},{key:"stop",value:function(){this.intervalId&&(nt().cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}},{key:"shouldUpdate",value:function(t,e){if(!t){var r,n=this.frameDuration;if(Q()(r=this.animations).call(r,(function(t,e){return e.update(n)||t}),!1))return!0}return!("function"!=typeof e||!e())||!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents()}},{key:"render",value:function(t,e,r,n,i,a,o){var s=this.CLIENT_WIDTH,u=this.CLIENT_HEIGHT,c=this.viewPort,l=this.ctx,f=this.isFirstRender,h=l.canvas;c.clear(),h.width&&h.height?c.setCurrent(h.width,h.height):c.setCurrent(s,u);var p=t.getStyle("width"),v=t.getStyle("height");!e&&(f||"number"!=typeof n&&"number"!=typeof i)&&(p.hasValue()&&(h.width=p.getPixels("x"),h.style&&(h.style.width="".concat(h.width,"px"))),v.hasValue()&&(h.height=v.getPixels("y"),h.style&&(h.style.height="".concat(h.height,"px"))));var y=h.clientWidth||h.width,g=h.clientHeight||h.height;if(e&&p.hasValue()&&v.hasValue()&&(y=p.getPixels("x"),g=v.getPixels("y")),c.setCurrent(y,g),"number"==typeof a&&t.getAttribute("x",!0).setValue(a),"number"==typeof o&&t.getAttribute("y",!0).setValue(o),"number"==typeof n||"number"==typeof i){var d,m,x=Ee(t.getAttribute("viewBox").getString()),b=0,S=0;if("number"==typeof n){var w=t.getStyle("width");w.hasValue()?b=w.getPixels("x")/n:isNaN(x[2])||(b=x[2]/n)}if("number"==typeof i){var A=t.getStyle("height");A.hasValue()?S=A.getPixels("y")/i:isNaN(x[3])||(S=x[3]/i)}b||(b=S),S||(S=b),t.getAttribute("width",!0).setValue(n),t.getAttribute("height",!0).setValue(i);var k=t.getStyle("transform",!0,!0);k.setValue(Y()(d=Y()(m="".concat(k.getString()," scale(")).call(m,1/b,", ")).call(d,1/S,")"))}r||l.clearRect(0,0,y,g),t.render(l),f&&(this.isFirstRender=!1)}}]),t}();or.defaultWindow=ir,or.defaultFetch=ar;var sr=or.defaultFetch,ur="undefined"!=typeof DOMParser?DOMParser:null,cr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.fetch,n=void 0===r?sr:r,i=e.DOMParser,a=void 0===i?ur:i;B(this,t),this.fetch=n,this.DOMParser=a}var e,r;return H(t,[{key:"parse",value:(r=z(D().mark((function t(e){return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!/^</.test(e)){t.next=2;break}return t.abrupt("return",this.parseFromString(e));case 2:return t.abrupt("return",this.load(e));case 3:case"end":return t.stop()}}),t,this)}))),function(t){return r.apply(this,arguments)})},{key:"parseFromString",value:function(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}},{key:"checkDocument",value:function(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}},{key:"load",value:(e=z(D().mark((function t(e){var r,n;return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fetch(e);case 2:return r=t.sent,t.next=5,r.text();case 5:return n=t.sent,t.abrupt("return",this.parseFromString(n));case 7:case"end":return t.stop()}}),t,this)}))),function(t){return e.apply(this,arguments)})}]),t}(),lr=function(){function t(e,r){B(this,t),this.type="translate",this.point=null,this.point=rr.parse(r)}return H(t,[{key:"apply",value:function(t){var e=this.point,r=e.x,n=e.y;t.translate(r||0,n||0)}},{key:"unapply",value:function(t){var e=this.point,r=e.x,n=e.y;t.translate(-1*r||0,-1*n||0)}},{key:"applyToPoint",value:function(t){var e=this.point,r=e.x,n=e.y;t.applyTransform([1,0,0,1,r||0,n||0])}}]),t}(),fr=function(){function t(e,r,n){B(this,t),this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=Ee(r);this.angle=new tr(e,"angle",i[0]),this.originX=n[0],this.originY=n[1],this.cx=i[1]||0,this.cy=i[2]||0}return H(t,[{key:"apply",value:function(t){var e=this.cx,r=this.cy,n=this.originX,i=this.originY,a=this.angle,o=e+n.getPixels("x"),s=r+i.getPixels("y");t.translate(o,s),t.rotate(a.getRadians()),t.translate(-o,-s)}},{key:"unapply",value:function(t){var e=this.cx,r=this.cy,n=this.angle;t.translate(e,r),t.rotate(-1*n.getRadians()),t.translate(-e,-r)}},{key:"applyToPoint",value:function(t){var e=this.cx,r=this.cy,n=this.angle.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}]),t}(),hr=function(){function t(e,r){B(this,t),this.type="scale",this.scale=null;var n=rr.parseScale(r);0!==n.x&&0!==n.y||(n.x=He,n.y=He),this.scale=n}return H(t,[{key:"apply",value:function(t){var e=this.scale,r=e.x,n=e.y;t.scale(r,n||r)}},{key:"unapply",value:function(t){var e=this.scale,r=e.x,n=e.y;t.scale(1/r,1/n||r)}},{key:"applyToPoint",value:function(t){var e=this.scale,r=e.x,n=e.y;t.applyTransform([r||0,0,0,n||0,0,0])}}]),t}(),pr=function(){function t(e,r){B(this,t),this.type="matrix",this.matrix=[],this.matrix=Ee(r)}return H(t,[{key:"apply",value:function(t){var e=this.matrix;t.transform(e[0],e[1],e[2],e[3],e[4],e[5])}},{key:"unapply",value:function(t){var e=this.matrix,r=e[0],n=e[2],i=e[4],a=e[1],o=e[3],s=e[5],u=1/(r*(1*o-0*s)-n*(1*a-0*s)+i*(0*a-0*o));t.transform(u*(1*o-0*s),u*(0*s-1*a),u*(0*i-1*n),u*(1*r-0*i),u*(n*s-i*o),u*(i*a-r*s))}},{key:"applyToPoint",value:function(t){t.applyTransform(this.matrix)}}]),t}();var vr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e){var r;return B(this,i),(r=n.call(this,t,e)).type="skew",r.angle=null,r.angle=new tr(t,"angle",e),r}return i}(pr);var yr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e){var r;return B(this,i),(r=n.call(this,t,e)).type="skewX",r.matrix=[1,0,Math.tan(r.angle.getRadians()),1,0,0],r}return i}(vr);var gr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e){var r;return B(this,i),(r=n.call(this,t,e)).type="skewY",r.matrix=[1,Math.tan(r.angle.getRadians()),0,1,0,0],r}return i}(vr),dr=function(){function t(e,r,n){var i=this;B(this,t),this.document=e,this.transforms=[];var a=function(t){var e;return at()(e=Pe(t)).call(e).replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(r);T()(a).call(a,(function(e){if("none"!==e){var r=function(t){var e=d(t.split("("),2),r=e[0],n=e[1];return[at()(r).call(r),at()(n).call(n).replace(")","")]}(e),a=d(r,2),o=a[0],s=a[1],u=t.transformTypes[o];void 0!==u&&i.transforms.push(new u(i.document,s,n))}}))}return H(t,[{key:"apply",value:function(t){for(var e=this.transforms,r=e.length,n=0;n<r;n++)e[n].apply(t)}},{key:"unapply",value:function(t){for(var e=this.transforms,r=e.length-1;r>=0;r--)e[r].unapply(t)}},{key:"applyToPoint",value:function(t){for(var e=this.transforms,r=e.length,n=0;n<r;n++)e[n].applyToPoint(t)}}],[{key:"fromElement",value:function(e,r){var n=r.getStyle("transform",!1,!0),i=d(r.getStyle("transform-origin",!1,!0).split(),2),a=i[0],o=i[1],s=[a,void 0===o?a:o];return n.hasValue()?new t(e,n.getString(),s):null}}]),t}();dr.transformTypes={translate:lr,rotate:fr,scale:hr,matrix:pr,skewX:yr,skewY:gr};var mr=function(){function t(e,r){var n,i,a=this,o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(B(this,t),this.document=e,this.node=r,this.captureTextNodes=o,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],r&&1===r.nodeType){if(T()(n=Tt()(r.attributes)).call(n,(function(t){var r=Ne(t.nodeName);a.attributes[r]=new tr(e,r,t.value)})),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue()){var s,c=u()(s=this.getAttribute("style").getString().split(";")).call(s,(function(t){return at()(t).call(t)}));T()(c).call(c,(function(t){var r;if(t){var n=d(u()(r=t.split(":")).call(r,(function(t){return at()(t).call(t)})),2),i=n[0],o=n[1];a.styles[i]=new tr(e,i,o)}}))}var l=e.definitions,f=this.getAttribute("id");f.hasValue()&&(l[f.getValue()]||(l[f.getValue()]=this)),T()(i=Tt()(r.childNodes)).call(i,(function(t){if(1===t.nodeType)a.addChild(t);else if(o&&(3===t.nodeType||4===t.nodeType)){var r=e.createTextNode(t);r.getText().length>0&&a.addChild(r)}}))}}return H(t,[{key:"getAttribute",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var n=new tr(this.document,t,"");return this.attributes[t]=n,n}return r||tr.empty(this.document)}},{key:"getHrefAttribute",value:function(){for(var t in this.attributes)if("href"===t||/:href$/.test(t))return this.attributes[t];return tr.empty(this.document)}},{key:"getStyle",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=this.styles[t];if(n)return n;var i=this.getAttribute(t);if(i&&i.hasValue())return this.styles[t]=i,i;if(!r){var a=this.parent;if(a){var o=a.getStyle(t);if(o&&o.hasValue())return o}}if(e){var s=new tr(this.document,t,"");return this.styles[t]=s,s}return n||tr.empty(this.document)}},{key:"render",value:function(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}},{key:"setContext",value:function(t){}},{key:"applyEffects",value:function(t){var e=dr.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var n=r.getDefinition();n&&n.apply(t)}}},{key:"clearContext",value:function(t){}},{key:"renderChildren",value:function(t){var e;T()(e=this.children).call(e,(function(e){e.render(t)}))}},{key:"addChild",value:function(e){var r,n=e instanceof t?e:this.document.createElement(e);n.parent=this,At()(r=t.ignoreChildTypes).call(r,n.type)||this.children.push(n)}},{key:"matchesSelector",value:function(t){var e,r=this.node;if("function"==typeof r.matches)return r.matches(t);var n=r.getAttribute("class");return!(!n||""===n)&&St()(e=n.split(" ")).call(e,(function(e){if(".".concat(e)===t)return!0}))}},{key:"addStylesFromStyleDefinition",value:function(){var t=this.document,e=t.styles,r=t.stylesSpecificity;for(var n in e)if("@"!==n[0]&&this.matchesSelector(n)){var i=e[n],a=r[n];if(i)for(var o in i){var s=this.stylesSpecificity[o];void 0===s&&(s="000"),a>=s&&(this.styles[o]=i[o],this.stylesSpecificity[o]=a)}}}},{key:"removeStyles",value:function(t,e){return Q()(e).call(e,(function(e,r){var n,i=t.getStyle(r);if(!i.hasValue())return e;var a,o=i.getString();return i.setValue(""),Y()(n=[]).call(n,function(t){if(c(t))return y(t)}(a=e)||function(t){if(void 0!==l&&null!=f(t)||null!=t["@@iterator"])return v(t)}(a)||g(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[[r,o]])}),[])}},{key:"restoreStyles",value:function(t,e){T()(e).call(e,(function(e){var r=d(e,2),n=r[0],i=r[1];t.getStyle(n,!0).setValue(i)}))}}]),t}();mr.ignoreChildTypes=["title"];var xr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){return B(this,i),n.call(this,t,e,r)}return i}(mr);function br(t){var e=at()(t).call(t);return/^('|")/.test(e)?e:'"'.concat(e,'"')}function Sr(t){if(!t)return"";var e=at()(t).call(t).toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function wr(t){if(!t)return"";var e=at()(t).call(t).toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}var Ar=function(){function t(e,r,n,i,a,o){B(this,t);var s=o?"string"==typeof o?t.parse(o):o:{};this.fontFamily=a||s.fontFamily,this.fontSize=i||s.fontSize,this.fontStyle=e||s.fontStyle,this.fontWeight=n||s.fontWeight,this.fontVariant=r||s.fontVariant}return H(t,[{key:"toString",value:function(){var t,e,r;return at()(t=[Sr(this.fontStyle),this.fontVariant,wr(this.fontWeight),this.fontSize,(e=this.fontFamily,"undefined"==typeof process?e:u()(r=at()(e).call(e).split(",")).call(r,br).join(","))].join(" ")).call(t)}}],[{key:"parse",value:function(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0,i="",a="",o="",s="",u="",c=at()(e=Pe(r)).call(e).split(" "),l={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return T()(c).call(c,(function(e){var r,n,c;switch(!0){case!l.fontStyle&&At()(r=t.styles).call(r,e):"inherit"!==e&&(i=e),l.fontStyle=!0;break;case!l.fontVariant&&At()(n=t.variants).call(n,e):"inherit"!==e&&(a=e),l.fontStyle=!0,l.fontVariant=!0;break;case!l.fontWeight&&At()(c=t.weights).call(c,e):"inherit"!==e&&(o=e),l.fontStyle=!0,l.fontVariant=!0,l.fontWeight=!0;break;case!l.fontSize:if("inherit"!==e){var f=d(e.split("/"),1);s=f[0]}l.fontStyle=!0,l.fontVariant=!0,l.fontWeight=!0,l.fontSize=!0;break;default:"inherit"!==e&&(u+=e)}})),new t(i,a,o,s,u,n)}}]),t}();Ar.styles="normal|italic|oblique|inherit",Ar.variants="normal|small-caps|inherit",Ar.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";var kr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;B(this,t),this.x1=e,this.y1=r,this.x2=n,this.y2=i,this.addPoint(e,r),this.addPoint(n,i)}return H(t,[{key:"addPoint",value:function(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}},{key:"addX",value:function(t){this.addPoint(t,null)}},{key:"addY",value:function(t){this.addPoint(null,t)}},{key:"addBoundingBox",value:function(t){if(t){var e=t.x1,r=t.y1,n=t.x2,i=t.y2;this.addPoint(e,r),this.addPoint(n,i)}}},{key:"sumCubic",value:function(t,e,r,n,i){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*n+Math.pow(t,3)*i}},{key:"bezierCurveAdd",value:function(t,e,r,n,i){var a=6*e-12*r+6*n,o=-3*e+9*r-9*n+3*i,s=3*r-3*e;if(0!==o){var u=Math.pow(a,2)-4*s*o;if(!(u<0)){var c=(-a+Math.sqrt(u))/(2*o);0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,n,i)):this.addY(this.sumCubic(c,e,r,n,i)));var l=(-a-Math.sqrt(u))/(2*o);0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,n,i)):this.addY(this.sumCubic(l,e,r,n,i)))}}else{if(0===a)return;var f=-s/a;0<f&&f<1&&(t?this.addX(this.sumCubic(f,e,r,n,i)):this.addY(this.sumCubic(f,e,r,n,i)))}}},{key:"addBezierCurve",value:function(t,e,r,n,i,a,o,s){this.addPoint(t,e),this.addPoint(o,s),this.bezierCurveAdd(!0,t,r,i,o),this.bezierCurveAdd(!1,e,n,a,s)}},{key:"addQuadraticCurve",value:function(t,e,r,n,i,a){var o=t+2/3*(r-t),s=e+2/3*(n-e),u=o+1/3*(i-t),c=s+1/3*(a-e);this.addBezierCurve(t,e,o,u,s,c,i,a)}},{key:"isPointInBox",value:function(t,e){var r=this.x1,n=this.y1,i=this.x2,a=this.y2;return r<=t&&t<=i&&n<=e&&e<=a}},{key:"x",get:function(){return this.x1}},{key:"y",get:function(){return this.y1}},{key:"width",get:function(){return this.x2-this.x1}},{key:"height",get:function(){return this.y2-this.y1}}]),t}();var Tr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).modifiedEmSizeStack=!1,t}return H(i,[{key:"calculateOpacity",value:function(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}},{key:"setContext",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),n=this.getStyle("fill-opacity"),i=this.getStyle("stroke"),a=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var o=r.getFillStyleDefinition(this,n);o&&(t.fillStyle=o)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var s=r.getColor();"inherit"!==s&&(t.fillStyle="none"===s?"rgba(0,0,0,0)":s)}if(n.hasValue()){var u=new tr(this.document,"fill",t.fillStyle).addOpacity(n).getColor();t.fillStyle=u}if(i.isUrlDefinition()){var c=i.getFillStyleDefinition(this,a);c&&(t.strokeStyle=c)}else if(i.hasValue()){"currentColor"===i.getString()&&i.setValue(this.getStyle("color").getColor());var l=i.getString();"inherit"!==l&&(t.strokeStyle="none"===l?"rgba(0,0,0,0)":l)}if(a.hasValue()){var f=new tr(this.document,"stroke",t.strokeStyle).addOpacity(a).getString();t.strokeStyle=f}var h=this.getStyle("stroke-width");if(h.hasValue()){var p=h.getPixels();t.lineWidth=p||He}var v=this.getStyle("stroke-linecap"),y=this.getStyle("stroke-linejoin"),g=this.getStyle("stroke-miterlimit"),d=this.getStyle("paint-order"),m=this.getStyle("stroke-dasharray"),x=this.getStyle("stroke-dashoffset");if(v.hasValue()&&(t.lineCap=v.getString()),y.hasValue()&&(t.lineJoin=y.getString()),g.hasValue()&&(t.miterLimit=g.getNumber()),d.hasValue()&&(t.paintOrder=d.getValue()),m.hasValue()&&"none"!==m.getString()){var b=Ee(m.getString());void 0!==t.setLineDash?t.setLineDash(b):void 0!==t.webkitLineDash?t.webkitLineDash=b:void 0===t.mozDash||1===b.length&&0===b[0]||(t.mozDash=b);var S=x.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=S:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=S:void 0!==t.mozDashOffset&&(t.mozDashOffset=S)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var w=this.getStyle("font"),A=this.getStyle("font-style"),k=this.getStyle("font-variant"),T=this.getStyle("font-weight"),P=this.getStyle("font-size"),O=this.getStyle("font-family"),C=new Ar(A.getString(),k.getString(),T.getString(),P.hasValue()?"".concat(P.getPixels(!0),"px"):"",O.getString(),Ar.parse(w.getString(),t.font));A.setValue(C.fontStyle),k.setValue(C.fontVariant),T.setValue(C.fontWeight),P.setValue(C.fontSize),O.setValue(C.fontFamily),t.font=C.toString(),P.isPixels()&&(this.document.emSize=P.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}},{key:"clearContext",value:function(t){Rt(xt(i.prototype),"clearContext",this).call(this,t),this.modifiedEmSizeStack&&this.document.popEmSize()}}]),i}(mr);var Pr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,(this instanceof i?this.constructor:void 0)===i||r)).type="text",a.x=0,a.y=0,a.measureCache=-1,a}return H(i,[{key:"setContext",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];Rt(xt(i.prototype),"setContext",this).call(this,t,e);var r=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();r&&(t.textBaseline=r)}},{key:"initializeCoordinates",value:function(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}},{key:"getBoundingBox",value:function(t){var e,r=this;if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var n=null;return T()(e=this.children).call(e,(function(e,i){var a=r.getChildBoundingBox(t,r,r,i);n?n.addBoundingBox(a):n=a})),n}},{key:"getFontSize",value:function(){var t=this.document,e=this.parent,r=Ar.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}},{key:"getTElementBoundingBox",value:function(t){var e=this.getFontSize();return new kr(this.x,this.y-e,this.x+this.measureText(t),this.y)}},{key:"getGlyph",value:function(t,e,r){var n=e[r],i=null;if(t.isArabic){var a=e.length,o=e[r-1],s=e[r+1],u="isolated";(0===r||" "===o)&&r<a-2&&" "!==s&&(u="terminal"),r>0&&" "!==o&&r<a-2&&" "!==s&&(u="medial"),r>0&&" "!==o&&(r===a-1||" "===s)&&(u="initial"),void 0!==t.glyphs[n]&&((i=t.glyphs[n][u])||"glyph"!==t.glyphs[n].type||(i=t.glyphs[n]))}else i=t.glyphs[n];return i||(i=t.missingGlyph),i}},{key:"getText",value:function(){return""}},{key:"getTextFromNode",value:function(t){var e=t||this.node,r=Tt()(e.parentNode.childNodes),n=Et()(r).call(r,e),i=r.length-1,a=Pe(e.value||e.text||e.textContent||"");return 0===n&&(a=Oe(a)),n===i&&(a=Ce(a)),a}},{key:"renderChildren",value:function(t){var e,r=this;if("text"===this.type){this.initializeCoordinates(t),T()(e=this.children).call(e,(function(e,n){r.renderChild(t,r,r,n)}));var n=this.document.screen.mouse;n.isWorking()&&n.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}},{key:"renderTElementChildren",value:function(t){var e=this.document,r=this.parent,n=this.getText(),i=r.getStyle("font-family").getDefinition();if(i)for(var a,o=i.fontFace.unitsPerEm,s=Ar.parse(e.ctx.font),u=r.getStyle("font-size").getNumber(s.fontSize),c=r.getStyle("font-style").getString(s.fontStyle),l=u/o,f=i.isRTL?Ot()(a=n.split("")).call(a).join(""):n,h=Ee(r.getAttribute("dx").getString()),p=f.length,v=0;v<p;v++){var y=this.getGlyph(i,f,v);t.translate(this.x,this.y),t.scale(l,-l);var g=t.lineWidth;t.lineWidth=t.lineWidth*o/u,"italic"===c&&t.transform(1,0,.4,1,0,0),y.render(t),"italic"===c&&t.transform(1,0,-.4,1,0,0),t.lineWidth=g,t.scale(1/l,-1/l),t.translate(-this.x,-this.y),this.x+=u*(y.horizAdvX||i.horizAdvX)/o,void 0===h[v]||isNaN(h[v])||(this.x+=h[v])}else{var d=this.x,m=this.y;"stroke"===t.paintOrder?(t.strokeStyle&&t.strokeText(n,d,m),t.fillStyle&&t.fillText(n,d,m)):(t.fillStyle&&t.fillText(n,d,m),t.strokeStyle&&t.strokeText(n,d,m))}}},{key:"getAnchorDelta",value:function(t,e,r){var n=this.getStyle("text-anchor").getString("start");if("start"!==n){for(var i=e.children,a=i.length,o=null,s=0,u=r;u<a&&(o=i[u],!(u>r&&o.getAttribute("x").hasValue()||o.getAttribute("text-anchor").hasValue()));u++)s+=o.measureTextRecursive(t);return-1*("end"===n?s:s/2)}return 0}},{key:"adjustChildCoordinates",value:function(t,e,r,n){var i=r.children[n];if("function"!=typeof i.measureText)return i;t.save(),i.setContext(t,!0);var a=i.getAttribute("x"),o=i.getAttribute("y"),s=i.getAttribute("dx"),u=i.getAttribute("dy"),c=i.getAttribute("text-anchor").getString("start");if(0===n&&"textNode"!==i.type&&(a.hasValue()||a.setValue(e.getAttribute("x").getValue("0")),o.hasValue()||o.setValue(e.getAttribute("y").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("dx").getValue("0")),u.hasValue()||u.setValue(e.getAttribute("dy").getValue("0"))),a.hasValue()){if(i.x=a.getPixels("x")+e.getAnchorDelta(t,r,n),"start"!==c){var l=i.measureTextRecursive(t);i.x+=-1*("end"===c?l:l/2)}s.hasValue()&&(i.x+=s.getPixels("x"))}else{if("start"!==c){var f=i.measureTextRecursive(t);e.x+=-1*("end"===c?f:f/2)}s.hasValue()&&(e.x+=s.getPixels("x")),i.x=e.x}return e.x=i.x+i.measureText(t),o.hasValue()?(i.y=o.getPixels("y"),u.hasValue()&&(i.y+=u.getPixels("y"))):(u.hasValue()&&(e.y+=u.getPixels("y")),i.y=e.y),e.y=i.y,i.clearContext(t),t.restore(),i}},{key:"getChildBoundingBox",value:function(t,e,r,n){var i,a=this.adjustChildCoordinates(t,e,r,n);if("function"!=typeof a.getBoundingBox)return null;var o=a.getBoundingBox(t);return o?(T()(i=a.children).call(i,(function(r,n){var i=e.getChildBoundingBox(t,e,a,n);o.addBoundingBox(i)})),o):null}},{key:"renderChild",value:function(t,e,r,n){var i,a=this.adjustChildCoordinates(t,e,r,n);a.render(t),T()(i=a.children).call(i,(function(r,n){e.renderChild(t,e,a,n)}))}},{key:"measureTextRecursive",value:function(t){var e;return Q()(e=this.children).call(e,(function(e,r){return e+r.measureTextRecursive(t)}),this.measureText(t))}},{key:"measureText",value:function(t){var e=this.measureCache;if(~e)return e;var r=this.getText(),n=this.measureTargetText(t,r);return this.measureCache=n,n}},{key:"measureTargetText",value:function(t,e){if(!e.length)return 0;var r=this.parent,n=r.getStyle("font-family").getDefinition();if(n){for(var i,a=this.getFontSize(),o=n.isRTL?Ot()(i=e.split("")).call(i).join(""):e,s=Ee(r.getAttribute("dx").getString()),u=o.length,c=0,l=0;l<u;l++)c+=(this.getGlyph(n,o,l).horizAdvX||n.horizAdvX)*a/n.fontFace.unitsPerEm,void 0===s[l]||isNaN(s[l])||(c+=s[l]);return c}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var f=t.measureText(e).width;return this.clearContext(t),t.restore(),f}}]),i}(Tr);var Or=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,(this instanceof i?this.constructor:void 0)===i||r)).type="tspan",a.text=a.children.length>0?"":a.getTextFromNode(),a}return H(i,[{key:"getText",value:function(){return this.text}}]),i}(Pr);var Cr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="textNode",t}return i}(Or);var Er=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t){var e;return B(this,i),(e=n.call(this,t.replace(/[+-.]\s+/g,"-").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,""))).control=null,e.start=null,e.current=null,e.command=null,e.commands=e.commands,e.i=-1,e.previousCommand=null,e.points=[],e.angles=[],e}return H(i,[{key:"reset",value:function(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new rr(0,0),this.control=new rr(0,0),this.current=new rr(0,0),this.points=[],this.angles=[]}},{key:"isEnd",value:function(){return this.i>=this.commands.length-1}},{key:"next",value:function(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}},{key:"getPoint",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new rr(this.command[t],this.command[e]);return this.makeAbsolute(r)}},{key:"getAsControlPoint",value:function(t,e){var r=this.getPoint(t,e);return this.control=r,r}},{key:"getAsCurrentPoint",value:function(t,e){var r=this.getPoint(t,e);return this.current=r,r}},{key:"getReflectedControlPoint",value:function(){var t=this.previousCommand.type;if(t!==Jt.CURVE_TO&&t!==Jt.SMOOTH_CURVE_TO&&t!==Jt.QUAD_TO&&t!==Jt.SMOOTH_QUAD_TO)return this.current;var e=this.current,r=e.x,n=e.y,i=this.control,a=i.x,o=i.y;return new rr(2*r-a,2*n-o)}},{key:"makeAbsolute",value:function(t){if(this.command.relative){var e=this.current,r=e.x,n=e.y;t.x+=r,t.y+=n}return t}},{key:"addMarker",value:function(t,e,r){var n=this.points,i=this.angles;r&&i.length>0&&!i[i.length-1]&&(i[i.length-1]=n[n.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}},{key:"addMarkerAngle",value:function(t,e){this.points.push(t),this.angles.push(e)}},{key:"getMarkerPoints",value:function(){return this.points}},{key:"getMarkerAngles",value:function(){for(var t=this.angles,e=t.length,r=0;r<e;r++)if(!t[r])for(var n=r+1;n<e;n++)if(t[n]){t[r]=t[n];break}return t}}]),i}(Jt);var Mr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="path",a.pathParser=null,a.pathParser=new Er(a.getAttribute("d").getString()),a}return H(i,[{key:"path",value:function(t){var e=this.pathParser,r=new kr;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case Er.MOVE_TO:this.pathM(t,r);break;case Er.LINE_TO:this.pathL(t,r);break;case Er.HORIZ_LINE_TO:this.pathH(t,r);break;case Er.VERT_LINE_TO:this.pathV(t,r);break;case Er.CURVE_TO:this.pathC(t,r);break;case Er.SMOOTH_CURVE_TO:this.pathS(t,r);break;case Er.QUAD_TO:this.pathQ(t,r);break;case Er.SMOOTH_QUAD_TO:this.pathT(t,r);break;case Er.ARC:this.pathA(t,r);break;case Er.CLOSE_PATH:this.pathZ(t,r)}return r}},{key:"getBoundingBox",value:function(t){return this.path()}},{key:"getMarkers",value:function(){var t=this.pathParser,e=t.getMarkerPoints(),r=t.getMarkerAngles();return u()(e).call(e,(function(t,e){return[t,r[e]]}))}},{key:"renderChildren",value:function(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?Vt()(t).call(t,e.getString()):Vt()(t).call(t)),""!==t.strokeStyle&&t.stroke();var r=this.getMarkers();if(r){var n=r.length-1,i=this.getStyle("marker-start"),a=this.getStyle("marker-mid"),o=this.getStyle("marker-end");if(i.isUrlDefinition()){var s=i.getDefinition(),u=d(r[0],2),c=u[0],l=u[1];s.render(t,c,l)}if(a.isUrlDefinition())for(var f=a.getDefinition(),h=1;h<n;h++){var p=d(r[h],2),v=p[0],y=p[1];f.render(t,v,y)}if(o.isUrlDefinition()){var g=o.getDefinition(),m=d(r[n],2),x=m[0],b=m[1];g.render(t,x,b)}}}},{key:"pathM",value:function(t,e){var r=this.pathParser,n=i.pathM(r).point,a=n.x,o=n.y;r.addMarker(n),e.addPoint(a,o),t&&t.moveTo(a,o)}},{key:"pathL",value:function(t,e){var r=this.pathParser,n=i.pathL(r),a=n.current,o=n.point,s=o.x,u=o.y;r.addMarker(o,a),e.addPoint(s,u),t&&t.lineTo(s,u)}},{key:"pathH",value:function(t,e){var r=this.pathParser,n=i.pathH(r),a=n.current,o=n.point,s=o.x,u=o.y;r.addMarker(o,a),e.addPoint(s,u),t&&t.lineTo(s,u)}},{key:"pathV",value:function(t,e){var r=this.pathParser,n=i.pathV(r),a=n.current,o=n.point,s=o.x,u=o.y;r.addMarker(o,a),e.addPoint(s,u),t&&t.lineTo(s,u)}},{key:"pathC",value:function(t,e){var r=this.pathParser,n=i.pathC(r),a=n.current,o=n.point,s=n.controlPoint,u=n.currentPoint;r.addMarker(u,s,o),e.addBezierCurve(a.x,a.y,o.x,o.y,s.x,s.y,u.x,u.y),t&&t.bezierCurveTo(o.x,o.y,s.x,s.y,u.x,u.y)}},{key:"pathS",value:function(t,e){var r=this.pathParser,n=i.pathS(r),a=n.current,o=n.point,s=n.controlPoint,u=n.currentPoint;r.addMarker(u,s,o),e.addBezierCurve(a.x,a.y,o.x,o.y,s.x,s.y,u.x,u.y),t&&t.bezierCurveTo(o.x,o.y,s.x,s.y,u.x,u.y)}},{key:"pathQ",value:function(t,e){var r=this.pathParser,n=i.pathQ(r),a=n.current,o=n.controlPoint,s=n.currentPoint;r.addMarker(s,o,o),e.addQuadraticCurve(a.x,a.y,o.x,o.y,s.x,s.y),t&&t.quadraticCurveTo(o.x,o.y,s.x,s.y)}},{key:"pathT",value:function(t,e){var r=this.pathParser,n=i.pathT(r),a=n.current,o=n.controlPoint,s=n.currentPoint;r.addMarker(s,o,o),e.addQuadraticCurve(a.x,a.y,o.x,o.y,s.x,s.y),t&&t.quadraticCurveTo(o.x,o.y,s.x,s.y)}},{key:"pathA",value:function(t,e){var r=this.pathParser,n=i.pathA(r),a=n.currentPoint,o=n.rX,s=n.rY,u=n.sweepFlag,c=n.xAxisRotation,l=n.centp,f=n.a1,h=n.ad,p=1-u?1:-1,v=f+p*(h/2),y=new rr(l.x+o*Math.cos(v),l.y+s*Math.sin(v));if(r.addMarkerAngle(y,v-p*Math.PI/2),r.addMarkerAngle(a,v-p*Math.PI),e.addPoint(a.x,a.y),t&&!isNaN(f)&&!isNaN(h)){var g=o>s?o:s,d=o>s?1:o/s,m=o>s?s/o:1;t.translate(l.x,l.y),t.rotate(c),t.scale(d,m),t.arc(0,0,g,f,f+h,Boolean(1-u)),t.scale(1/d,1/m),t.rotate(-c),t.translate(-l.x,-l.y)}}},{key:"pathZ",value:function(t,e){i.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}],[{key:"pathM",value:function(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}},{key:"pathL",value:function(t){return{current:t.current,point:t.getAsCurrentPoint()}}},{key:"pathH",value:function(t){var e=t.current,r=t.command,n=new rr((r.relative?e.x:0)+r.x,e.y);return t.current=n,{current:e,point:n}}},{key:"pathV",value:function(t){var e=t.current,r=t.command,n=new rr(e.x,(r.relative?e.y:0)+r.y);return t.current=n,{current:e,point:n}}},{key:"pathC",value:function(t){return{current:t.current,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}},{key:"pathS",value:function(t){return{current:t.current,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}},{key:"pathQ",value:function(t){return{current:t.current,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}},{key:"pathT",value:function(t){var e=t.current,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}},{key:"pathA",value:function(t){var e=t.current,r=t.command,n=r.rX,i=r.rY,a=r.xRot,o=r.lArcFlag,s=r.sweepFlag,u=a*(Math.PI/180),c=t.getAsCurrentPoint(),l=new rr(Math.cos(u)*(e.x-c.x)/2+Math.sin(u)*(e.y-c.y)/2,-Math.sin(u)*(e.x-c.x)/2+Math.cos(u)*(e.y-c.y)/2),f=Math.pow(l.x,2)/Math.pow(n,2)+Math.pow(l.y,2)/Math.pow(i,2);f>1&&(n*=Math.sqrt(f),i*=Math.sqrt(f));var h=(o===s?-1:1)*Math.sqrt((Math.pow(n,2)*Math.pow(i,2)-Math.pow(n,2)*Math.pow(l.y,2)-Math.pow(i,2)*Math.pow(l.x,2))/(Math.pow(n,2)*Math.pow(l.y,2)+Math.pow(i,2)*Math.pow(l.x,2)));isNaN(h)&&(h=0);var p=new rr(h*n*l.y/i,h*-i*l.x/n),v=new rr((e.x+c.x)/2+Math.cos(u)*p.x-Math.sin(u)*p.y,(e.y+c.y)/2+Math.sin(u)*p.x+Math.cos(u)*p.y),y=qe([1,0],[(l.x-p.x)/n,(l.y-p.y)/i]),g=[(l.x-p.x)/n,(l.y-p.y)/i],d=[(-l.x-p.x)/n,(-l.y-p.y)/i],m=qe(g,d);return Ye(g,d)<=-1&&(m=Math.PI),Ye(g,d)>=1&&(m=0),{currentPoint:c,rX:n,rY:i,sweepFlag:s,xAxisRotation:u,centp:v,a1:y,ad:m}}},{key:"pathZ",value:function(t){t.current=t.start}}]),i}(Tr);var Nr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="svg",t.root=!1,t}return H(i,[{key:"setContext",value:function(t){var e=this.document,r=e.screen,n=e.window,a=t.canvas;if(r.setDefaults(t),a.style&&void 0!==t.font&&n&&void 0!==n.getComputedStyle){t.font=n.getComputedStyle(a).getPropertyValue("font");var o=new tr(e,"fontSize",Ar.parse(t.font).fontSize);o.hasValue()&&(e.rootEmSize=o.getPixels("y"),e.emSize=e.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var s=r.viewPort,u=s.width,c=s.height;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var l=this.getAttribute("refX"),f=this.getAttribute("refY"),h=this.getAttribute("viewBox"),p=h.hasValue()?Ee(h.getString()):null,v=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),y=0,g=0,d=0,m=0;p&&(y=p[0],g=p[1]),this.root||(u=this.getStyle("width").getPixels("x"),c=this.getStyle("height").getPixels("y"),"marker"===this.type&&(d=y,m=g,y=0,g=0)),r.viewPort.setCurrent(u,c),this.node&&this.getStyle("transform",!1,!0).hasValue()&&!this.getStyle("transform-origin",!1,!0).hasValue()&&this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),Rt(xt(i.prototype),"setContext",this).call(this,t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),p&&(u=p[2],c=p[3]),e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:r.viewPort.width,desiredWidth:u,height:r.viewPort.height,desiredHeight:c,minX:y,minY:g,refX:l.getValue(),refY:f.getValue(),clip:v,clipX:d,clipY:m}),p&&(r.viewPort.removeCurrent(),r.viewPort.setCurrent(u,c))}},{key:"clearContext",value:function(t){Rt(xt(i.prototype),"clearContext",this).call(this,t),this.document.screen.viewPort.removeCurrent()}},{key:"resize",value:function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),a=this.getAttribute("height",!0),o=this.getAttribute("viewBox"),s=this.getAttribute("style"),u=i.getNumber(0),c=a.getNumber(0);if(n)if("string"==typeof n)this.getAttribute("preserveAspectRatio",!0).setValue(n);else{var l=this.getAttribute("preserveAspectRatio");l.hasValue()&&l.setValue(l.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(i.setValue(t),a.setValue(r),o.hasValue()||o.setValue(Y()(e="0 0 ".concat(u||t," ")).call(e,c||r)),s.hasValue()){var f=this.getStyle("width"),h=this.getStyle("height");f.hasValue()&&f.setValue("".concat(t,"px")),h.hasValue()&&h.setValue("".concat(r,"px"))}}}]),i}(Tr);var Rr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="rect",t}return H(i,[{key:"path",value:function(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),n=this.getStyle("width",!1,!0).getPixels("x"),i=this.getStyle("height",!1,!0).getPixels("y"),a=this.getAttribute("rx"),o=this.getAttribute("ry"),s=a.getPixels("x"),u=o.getPixels("y");if(a.hasValue()&&!o.hasValue()&&(u=s),o.hasValue()&&!a.hasValue()&&(s=u),s=Math.min(s,n/2),u=Math.min(u,i/2),t){var c=(Math.sqrt(2)-1)/3*4;t.beginPath(),i>0&&n>0&&(t.moveTo(e+s,r),t.lineTo(e+n-s,r),t.bezierCurveTo(e+n-s+c*s,r,e+n,r+u-c*u,e+n,r+u),t.lineTo(e+n,r+i-u),t.bezierCurveTo(e+n,r+i-u+c*u,e+n-s+c*s,r+i,e+n-s,r+i),t.lineTo(e+s,r+i),t.bezierCurveTo(e+s-c*s,r+i,e,r+i-u+c*u,e,r+i-u),t.lineTo(e,r+u),t.bezierCurveTo(e,r+u-c*u,e+s-c*s,r,e+s,r),t.closePath())}return new kr(e,r,e+n,r+i)}},{key:"getMarkers",value:function(){return null}}]),i}(Mr);var _r=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="circle",t}return H(i,[{key:"path",value:function(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),n=this.getAttribute("r").getPixels();return t&&n>0&&(t.beginPath(),t.arc(e,r,n,0,2*Math.PI,!1),t.closePath()),new kr(e-n,r-n,e+n,r+n)}},{key:"getMarkers",value:function(){return null}}]),i}(Mr);var Vr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="ellipse",t}return H(i,[{key:"path",value:function(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),n=this.getAttribute("ry").getPixels("y"),i=this.getAttribute("cx").getPixels("x"),a=this.getAttribute("cy").getPixels("y");return t&&r>0&&n>0&&(t.beginPath(),t.moveTo(i+r,a),t.bezierCurveTo(i+r,a+e*n,i+e*r,a+n,i,a+n),t.bezierCurveTo(i-e*r,a+n,i-r,a+e*n,i-r,a),t.bezierCurveTo(i-r,a-e*n,i-e*r,a-n,i,a-n),t.bezierCurveTo(i+e*r,a-n,i+r,a-e*n,i+r,a),t.closePath()),new kr(i-r,a-n,i+r,a+n)}},{key:"getMarkers",value:function(){return null}}]),i}(Mr);var Dr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="line",t}return H(i,[{key:"getPoints",value:function(){return[new rr(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new rr(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}},{key:"path",value:function(t){var e=d(this.getPoints(),2),r=e[0],n=r.x,i=r.y,a=e[1],o=a.x,s=a.y;return t&&(t.beginPath(),t.moveTo(n,i),t.lineTo(o,s)),new kr(n,i,o,s)}},{key:"getMarkers",value:function(){var t=d(this.getPoints(),2),e=t[0],r=t[1],n=e.angleTo(r);return[[e,n],[r,n]]}}]),i}(Mr);var Ir=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="polyline",a.points=[],a.points=rr.parsePath(a.getAttribute("points").getString()),a}return H(i,[{key:"path",value:function(t){var e=this.points,r=d(e,1)[0],n=r.x,i=r.y,a=new kr(n,i);return t&&(t.beginPath(),t.moveTo(n,i)),T()(e).call(e,(function(e){var r=e.x,n=e.y;a.addPoint(r,n),t&&t.lineTo(r,n)})),a}},{key:"getMarkers",value:function(){var t=this.points,e=t.length-1,r=[];return T()(t).call(t,(function(n,i){i!==e&&r.push([n,n.angleTo(t[i+1])])})),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}]),i}(Mr);var Lr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="polygon",t}return H(i,[{key:"path",value:function(t){var e=Rt(xt(i.prototype),"path",this).call(this,t),r=d(this.points,1)[0],n=r.x,a=r.y;return t&&(t.lineTo(n,a),t.closePath()),e}}]),i}(Ir);var zr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="pattern",t}return H(i,[{key:"createPattern",value:function(t,e,r){var n=this.getStyle("width").getPixels("x",!0),i=this.getStyle("height").getPixels("y",!0),a=new Nr(this.document,null);a.attributes.viewBox=new tr(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.width=new tr(this.document,"width","".concat(n,"px")),a.attributes.height=new tr(this.document,"height","".concat(i,"px")),a.attributes.transform=new tr(this.document,"transform",this.getAttribute("patternTransform").getValue()),a.children=this.children;var o=this.document.createCanvas(n,i),s=o.getContext("2d"),u=this.getAttribute("x"),c=this.getAttribute("y");u.hasValue()&&c.hasValue()&&s.translate(u.getPixels("x",!0),c.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:re()(this.styles,"fill-opacity");for(var l=-1;l<=1;l++)for(var f=-1;f<=1;f++)s.save(),a.attributes.x=new tr(this.document,"x",l*o.width),a.attributes.y=new tr(this.document,"y",f*o.height),a.render(s),s.restore();return t.createPattern(o,"repeat")}}]),i}(mr);var jr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="marker",t}return H(i,[{key:"render",value:function(t,e,r){if(e){var n=e.x,i=e.y,a=this.getAttribute("orient").getValue("auto"),o=this.getAttribute("markerUnits").getValue("strokeWidth");t.translate(n,i),"auto"===a&&t.rotate(r),"strokeWidth"===o&&t.scale(t.lineWidth,t.lineWidth),t.save();var s=new Nr(this.document,null);s.type=this.type,s.attributes.viewBox=new tr(this.document,"viewBox",this.getAttribute("viewBox").getValue()),s.attributes.refX=new tr(this.document,"refX",this.getAttribute("refX").getValue()),s.attributes.refY=new tr(this.document,"refY",this.getAttribute("refY").getValue()),s.attributes.width=new tr(this.document,"width",this.getAttribute("markerWidth").getValue()),s.attributes.height=new tr(this.document,"height",this.getAttribute("markerHeight").getValue()),s.attributes.overflow=new tr(this.document,"overflow",this.getAttribute("overflow").getValue()),s.attributes.fill=new tr(this.document,"fill",this.getAttribute("fill").getColor("black")),s.attributes.stroke=new tr(this.document,"stroke",this.getAttribute("stroke").getValue("none")),s.children=this.children,s.render(t),t.restore(),"strokeWidth"===o&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===a&&t.rotate(-r),t.translate(-n,-i)}}}]),i}(mr);var Fr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="defs",t}return H(i,[{key:"render",value:function(){}}]),i}(mr);var Br=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="g",t}return H(i,[{key:"getBoundingBox",value:function(t){var e,r=new kr;return T()(e=this.children).call(e,(function(e){r.addBoundingBox(e.getBoundingBox(t))})),r}}]),i}(Tr);var Ur=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;B(this,i),(a=n.call(this,t,e,r)).attributesToInherit=["gradientUnits"],a.stops=[];var o=gt(a),s=o.stops,u=o.children;return T()(u).call(u,(function(t){"stop"===t.type&&s.push(t)})),a}return H(i,[{key:"getGradientUnits",value:function(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}},{key:"createGradient",value:function(t,e,r){var n=this,i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var a=i.stops,o=this.getGradient(t,e);if(!o)return this.addParentOpacity(r,a[a.length-1].color);if(T()(a).call(a,(function(t){o.addColorStop(t.offset,n.addParentOpacity(r,t.color))})),this.getAttribute("gradientTransform").hasValue()){var s=this.document,u=s.screen,c=u.MAX_VIRTUAL_PIXELS,l=d(u.viewPort.viewPorts,1)[0],f=new Rr(s,null);f.attributes.x=new tr(s,"x",-c/3),f.attributes.y=new tr(s,"y",-c/3),f.attributes.width=new tr(s,"width",c),f.attributes.height=new tr(s,"height",c);var h=new Br(s,null);h.attributes.transform=new tr(s,"transform",this.getAttribute("gradientTransform").getValue()),h.children=[f];var p=new Nr(s,null);p.attributes.x=new tr(s,"x",0),p.attributes.y=new tr(s,"y",0),p.attributes.width=new tr(s,"width",l.width),p.attributes.height=new tr(s,"height",l.height),p.children=[h];var v=s.createCanvas(l.width,l.height),y=v.getContext("2d");return y.fillStyle=o,p.render(y),y.createPattern(v,"no-repeat")}return o}},{key:"inheritStopContainer",value:function(t){var e,r=this;T()(e=this.attributesToInherit).call(e,(function(e){!r.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&r.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())}))}},{key:"addParentOpacity",value:function(t,e){return t.hasValue()?new tr(this.document,"color",e).addOpacity(t).getColor():e}}]),i}(mr);var Hr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="linearGradient",a.attributesToInherit.push("x1","y1","x2","y2"),a}return H(i,[{key:"getGradient",value:function(t,e){var r="objectBoundingBox"===this.getGradientUnits(),n=r?e.getBoundingBox(t):null;if(r&&!n)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var i=r?n.x+n.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),a=r?n.y+n.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),o=r?n.x+n.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),s=r?n.y+n.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return i===o&&a===s?null:t.createLinearGradient(i,a,o,s)}}]),i}(Ur);var Xr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="radialGradient",a.attributesToInherit.push("cx","cy","r","fx","fy","fr"),a}return H(i,[{key:"getGradient",value:function(t,e){var r="objectBoundingBox"===this.getGradientUnits(),n=e.getBoundingBox(t);if(r&&!n)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var i=r?n.x+n.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),a=r?n.y+n.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),o=i,s=a;this.getAttribute("fx").hasValue()&&(o=r?n.x+n.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(s=r?n.y+n.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var u=r?(n.width+n.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),c=this.getAttribute("fr").getPixels();return t.createRadialGradient(o,s,c,i,a,u)}}]),i}(Ur);var Yr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;B(this,i),(a=n.call(this,t,e,r)).type="stop";var o=Math.max(0,Math.min(1,a.getAttribute("offset").getNumber())),s=a.getStyle("stop-opacity"),u=a.getStyle("stop-color",!0);return""===u.getString()&&u.setValue("#000"),s.hasValue()&&(u=u.addOpacity(s)),a.offset=o,a.color=u.getColor(),a}return i}(mr);var qr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="animate",a.duration=0,a.initialValue=null,a.initialUnits="",a.removed=!1,a.frozen=!1,t.screen.animations.push(gt(a)),a.begin=a.getAttribute("begin").getMilliseconds(),a.maxDuration=a.begin+a.getAttribute("dur").getMilliseconds(),a.from=a.getAttribute("from"),a.to=a.getAttribute("to"),a.values=a.getAttribute("values"),ie()(a).hasValue()&&ie()(a).setValue(ie()(a).getString().split(";")),a}return H(i,[{key:"getProperty",value:function(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}},{key:"calcValue",value:function(){var t,e=this.initialUnits,r=this.getProgress(),n=r.progress,i=r.from,a=r.to,o=i.getNumber()+(a.getNumber()-i.getNumber())*n;return"%"===e&&(o*=100),Y()(t="".concat(o)).call(t,e)}},{key:"update",value:function(t){var e=this.parent,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var n=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==n||this.frozen){if("remove"===n&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var i=!1;if(this.begin<this.duration){var a=this.calcValue(),o=this.getAttribute("type");if(o.hasValue()){var s,u=o.getString();a=Y()(s="".concat(u,"(")).call(s,a,")")}r.setValue(a),i=!0}return i}},{key:"getProgress",value:function(){var t=this.document,e=ie()(this),r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var n=r.progress*(e.getValue().length-1),i=Math.floor(n),a=Math.ceil(n);r.from=new tr(t,"from",o()(e.getValue()[i])),r.to=new tr(t,"to",o()(e.getValue()[a])),r.progress=(n-i)/(a-i)}else r.from=this.from,r.to=this.to;return r}}]),i}(mr);var Qr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="animateColor",t}return H(i,[{key:"calcValue",value:function(){var t=this.getProgress(),e=t.progress,r=t.from,n=t.to,i=new(st())(r.getColor()),a=new(st())(n.getColor());if(i.ok&&a.ok){var o,s,u=i.r+(a.r-i.r)*e,c=i.g+(a.g-i.g)*e,l=i.b+(a.b-i.b)*e;return Y()(o=Y()(s="rgb(".concat(oe()(u,10),", ")).call(s,oe()(c,10),", ")).call(o,oe()(l,10),")")}return this.getAttribute("from").getColor()}}]),i}(qr);var Wr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="animateTransform",t}return H(i,[{key:"calcValue",value:function(){var t=this.getProgress(),e=t.progress,r=t.from,n=t.to,i=Ee(r.getString()),a=Ee(n.getString());return u()(i).call(i,(function(t,r){return t+(a[r]-t)*e})).join(" ")}}]),i}(qr);function Gr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var $r=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;B(this,i),(a=n.call(this,t,e,r)).type="font",a.glyphs={},a.horizAdvX=a.getAttribute("horiz-adv-x").getNumber();var o,s=t.definitions,u=function(t,e){var r;if(void 0===he()||null==h()(t)){if(le()(t)||(r=function(t,e){var r;if(t){if("string"==typeof t)return Gr(t,e);var n=ve()(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Tt()(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Gr(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=ue()(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}(gt(a).children);try{for(u.s();!(o=u.n()).done;){var c=o.value;switch(c.type){case"font-face":a.fontFace=c;var l=c.getStyle("font-family");l.hasValue()&&(s[l.getString()]=gt(a));break;case"missing-glyph":a.missingGlyph=c;break;case"glyph":var f=c;f.arabicForm?(a.isRTL=!0,a.isArabic=!0,void 0===a.glyphs[f.unicode]&&(a.glyphs[f.unicode]={}),a.glyphs[f.unicode][f.arabicForm]=f):a.glyphs[f.unicode]=f}}}catch(t){u.e(t)}finally{u.f()}return a}return H(i,[{key:"render",value:function(){}}]),i}(mr);var Zr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="font-face",a.ascent=a.getAttribute("ascent").getNumber(),a.descent=a.getAttribute("descent").getNumber(),a.unitsPerEm=a.getAttribute("units-per-em").getNumber(),a}return i}(mr);var Kr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="missing-glyph",t.horizAdvX=0,t}return i}(Mr);var Jr=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="glyph",a.horizAdvX=a.getAttribute("horiz-adv-x").getNumber(),a.unicode=a.getAttribute("unicode").getString(),a.arabicForm=a.getAttribute("arabic-form").getString(),a}return i}(Mr);var tn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="tref",t}return H(i,[{key:"getText",value:function(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}]),i}(Pr);var en=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a,o;B(this,i),(o=n.call(this,t,e,r)).type="a";var s=e.childNodes,u=s[0],c=s.length>0&&Z()(a=Tt()(s)).call(a,(function(t){return 3===t.nodeType}));return o.hasText=c,o.text=c?o.getTextFromNode(u):"",o}return H(i,[{key:"getText",value:function(){return this.text}},{key:"renderChildren",value:function(t){if(this.hasText){Rt(xt(i.prototype),"renderChildren",this).call(this,t);var e=this.document,r=this.x,n=this.y,a=e.screen.mouse,o=new tr(e,"fontSize",Ar.parse(e.ctx.font).fontSize);a.isWorking()&&a.checkBoundingBox(this,new kr(r,n-o.getPixels("y"),r+this.measureText(t),n))}else if(this.children.length>0){var s=new Br(this.document,null);s.children=this.children,s.parent=this,s.render(t)}}},{key:"onClick",value:function(){var t=this.document.window;t&&t.open(this.getHrefAttribute().getString())}},{key:"onMouseMove",value:function(){this.document.ctx.canvas.style.cursor="pointer"}}]),i}(Pr);function rn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function nn(t,e){var r=_()(t);if(N()){var n=N()(t);e&&(n=E()(n).call(n,(function(e){return O()(t,e).enumerable}))),r.push.apply(r,n)}return r}function an(t){for(var e=1;e<arguments.length;e++){var r,n=null!=arguments[e]?arguments[e]:{};if(e%2)T()(r=nn(Object(n),!0)).call(r,(function(e){F(t,e,n[e])}));else if(A())S()(t,A()(n));else{var i;T()(i=nn(Object(n))).call(i,(function(e){x()(t,e,O()(n,e))}))}}return t}var on=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;B(this,i),(a=n.call(this,t,e,r)).type="textPath",a.textWidth=0,a.textHeight=0,a.pathLength=-1,a.glyphInfo=null,a.letterSpacingCache=[],a.measuresCache=new(ge())([["",0]]);var o=a.getHrefAttribute().getDefinition();return a.text=a.getTextFromNode(),a.dataArray=a.parsePathData(o),a}return H(i,[{key:"getText",value:function(){return this.text}},{key:"path",value:function(t){var e=this.dataArray;t&&t.beginPath(),T()(e).call(e,(function(e){var r=e.type,n=e.points;switch(r){case Er.LINE_TO:t&&t.lineTo(n[0],n[1]);break;case Er.MOVE_TO:t&&t.moveTo(n[0],n[1]);break;case Er.CURVE_TO:t&&t.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);break;case Er.QUAD_TO:t&&t.quadraticCurveTo(n[0],n[1],n[2],n[3]);break;case Er.ARC:var i=d(n,8),a=i[0],o=i[1],s=i[2],u=i[3],c=i[4],l=i[5],f=i[6],h=i[7],p=s>u?s:u,v=s>u?1:s/u,y=s>u?u/s:1;t&&(t.translate(a,o),t.rotate(f),t.scale(v,y),t.arc(0,0,p,c,c+l,Boolean(1-h)),t.scale(1/v,1/y),t.rotate(-f),t.translate(-a,-o));break;case Er.CLOSE_PATH:t&&t.closePath()}}))}},{key:"renderChildren",value:function(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),n=this.glyphInfo,i=t.fillStyle;"underline"===e&&t.beginPath(),T()(n).call(n,(function(n,i){var a=n.p0,o=n.p1,s=n.rotation,u=n.text;t.save(),t.translate(a.x,a.y),t.rotate(s),t.fillStyle&&t.fillText(u,0,0),t.strokeStyle&&t.strokeText(u,0,0),t.restore(),"underline"===e&&(0===i&&t.moveTo(a.x,a.y+r/8),t.lineTo(o.x,o.y+r/5))})),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=i,t.stroke(),t.closePath()),t.restore()}},{key:"getLetterSpacingAt",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}},{key:"findSegmentToFitChar",value:function(t,e,r,n,i,a,o,s,u){var c=a,l=this.measureText(t,s);" "===s&&"justify"===e&&r<n&&(l+=(n-r)/i),u>-1&&(c+=this.getLetterSpacingAt(u));var f=this.textHeight/20,h=this.getEquidistantPointOnPath(c,f,0),p=this.getEquidistantPointOnPath(c+l,f,0),v={p0:h,p1:p},y=h&&p?Math.atan2(p.y-h.y,p.x-h.x):0;if(o){var g=Math.cos(Math.PI/2+y)*o,d=Math.cos(-y)*o;v.p0=an(an({},h),{},{x:h.x+g,y:h.y+d}),v.p1=an(an({},p),{},{x:p.x+g,y:p.y+d})}return{offset:c+=l,segment:v,rotation:y}}},{key:"measureText",value:function(t,e){var r=this.measuresCache,n=e||this.getText();if(r.has(n))return r.get(n);var i=this.measureTargetText(t,n);return r.set(n,i),i}},{key:"setTextData",value:function(t){var e,r=this;if(!this.glyphInfo){var n=this.getText(),i=n.split(""),a=n.split(" ").length-1,o=u()(e=this.parent.getAttribute("dx").split()).call(e,(function(t){return t.getPixels("x")})),s=this.parent.getAttribute("dy").getPixels("y"),c=this.parent.getStyle("text-anchor").getString("start"),l=this.getStyle("letter-spacing"),f=this.parent.getStyle("letter-spacing"),h=0;l.hasValue()&&"inherit"!==l.getValue()?l.hasValue()&&"initial"!==l.getValue()&&"unset"!==l.getValue()&&(h=l.getPixels()):h=f.getPixels();var p=[],v=n.length;this.letterSpacingCache=p;for(var y=0;y<v;y++)p.push(void 0!==o[y]?o[y]:h);var g=Q()(p).call(p,(function(t,e,r){return 0===r?0:t+e||0}),0),d=this.measureText(t),m=Math.max(d+g,0);this.textWidth=d,this.textHeight=this.getFontSize(),this.glyphInfo=[];var x=this.getPathLength(),b=this.getStyle("startOffset").getNumber(0)*x,S=0;"middle"!==c&&"center"!==c||(S=-m/2),"end"!==c&&"right"!==c||(S=-m),S+=b,T()(i).call(i,(function(e,n){var o=r.findSegmentToFitChar(t,c,m,x,a,S,s,e,n),u=o.offset,l=o.segment,f=o.rotation;S=u,l.p0&&l.p1&&r.glyphInfo.push({text:i[n],p0:l.p0,p1:l.p1,rotation:f})}))}}},{key:"parsePathData",value:function(t){if(this.pathLength=-1,!t)return[];var e=[],r=t.pathParser;for(r.reset();!r.isEnd();){var n=r.current,i=n?n.x:0,a=n?n.y:0,o=r.next(),s=o.type,u=[];switch(o.type){case Er.MOVE_TO:this.pathM(r,u);break;case Er.LINE_TO:s=this.pathL(r,u);break;case Er.HORIZ_LINE_TO:s=this.pathH(r,u);break;case Er.VERT_LINE_TO:s=this.pathV(r,u);break;case Er.CURVE_TO:this.pathC(r,u);break;case Er.SMOOTH_CURVE_TO:s=this.pathS(r,u);break;case Er.QUAD_TO:this.pathQ(r,u);break;case Er.SMOOTH_QUAD_TO:s=this.pathT(r,u);break;case Er.ARC:u=this.pathA(r);break;case Er.CLOSE_PATH:Mr.pathZ(r)}o.type!==Er.CLOSE_PATH?e.push({type:s,points:u,start:{x:i,y:a},pathLength:this.calcLength(i,a,s,u)}):e.push({type:Er.CLOSE_PATH,points:[],pathLength:0})}return e}},{key:"pathM",value:function(t,e){var r=Mr.pathM(t).point,n=r.x,i=r.y;e.push(n,i)}},{key:"pathL",value:function(t,e){var r=Mr.pathL(t).point,n=r.x,i=r.y;return e.push(n,i),Er.LINE_TO}},{key:"pathH",value:function(t,e){var r=Mr.pathH(t).point,n=r.x,i=r.y;return e.push(n,i),Er.LINE_TO}},{key:"pathV",value:function(t,e){var r=Mr.pathV(t).point,n=r.x,i=r.y;return e.push(n,i),Er.LINE_TO}},{key:"pathC",value:function(t,e){var r=Mr.pathC(t),n=r.point,i=r.controlPoint,a=r.currentPoint;e.push(n.x,n.y,i.x,i.y,a.x,a.y)}},{key:"pathS",value:function(t,e){var r=Mr.pathS(t),n=r.point,i=r.controlPoint,a=r.currentPoint;return e.push(n.x,n.y,i.x,i.y,a.x,a.y),Er.CURVE_TO}},{key:"pathQ",value:function(t,e){var r=Mr.pathQ(t),n=r.controlPoint,i=r.currentPoint;e.push(n.x,n.y,i.x,i.y)}},{key:"pathT",value:function(t,e){var r=Mr.pathT(t),n=r.controlPoint,i=r.currentPoint;return e.push(n.x,n.y,i.x,i.y),Er.QUAD_TO}},{key:"pathA",value:function(t){var e=Mr.pathA(t),r=e.rX,n=e.rY,i=e.sweepFlag,a=e.xAxisRotation,o=e.centp,s=e.a1,u=e.ad;return 0===i&&u>0&&(u-=2*Math.PI),1===i&&u<0&&(u+=2*Math.PI),[o.x,o.y,r,n,s,u,a,i]}},{key:"calcLength",value:function(t,e,r,n){var i=0,a=null,o=null,s=0;switch(r){case Er.LINE_TO:return this.getLineLength(t,e,n[0],n[1]);case Er.CURVE_TO:for(i=0,a=this.getPointOnCubicBezier(0,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),s=.01;s<=1;s+=.01)o=this.getPointOnCubicBezier(s,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),i+=this.getLineLength(a.x,a.y,o.x,o.y),a=o;return i;case Er.QUAD_TO:for(i=0,a=this.getPointOnQuadraticBezier(0,t,e,n[0],n[1],n[2],n[3]),s=.01;s<=1;s+=.01)o=this.getPointOnQuadraticBezier(s,t,e,n[0],n[1],n[2],n[3]),i+=this.getLineLength(a.x,a.y,o.x,o.y),a=o;return i;case Er.ARC:i=0;var u=n[4],c=n[5],l=n[4]+c,f=Math.PI/180;if(Math.abs(u-l)<f&&(f=Math.abs(u-l)),a=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],u,0),c<0)for(s=u-f;s>l;s-=f)o=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],s,0),i+=this.getLineLength(a.x,a.y,o.x,o.y),a=o;else for(s=u+f;s<l;s+=f)o=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],s,0),i+=this.getLineLength(a.x,a.y,o.x,o.y),a=o;return o=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],l,0),i+this.getLineLength(a.x,a.y,o.x,o.y)}return 0}},{key:"getPointOnLine",value:function(t,e,r,n,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,s=(i-r)/(n-e+He),u=Math.sqrt(t*t/(1+s*s));n<e&&(u*=-1);var c=s*u,l=null;if(n===e)l={x:a,y:o+c};else if((o-r)/(a-e+He)===s)l={x:a+u,y:o+c};else{var f=0,h=0,p=this.getLineLength(e,r,n,i);if(p<He)return null;var v=(a-e)*(n-e)+(o-r)*(i-r);f=e+(v/=p*p)*(n-e),h=r+v*(i-r);var y=this.getLineLength(a,o,f,h),g=Math.sqrt(t*t-y*y);u=Math.sqrt(g*g/(1+s*s)),n<e&&(u*=-1),l={x:f+u,y:h+(c=s*u)}}return l}},{key:"getPointOnPath",value:function(t){var e=this.getPathLength(),r=0,n=null;if(t<-5e-5||t-5e-5>e)return null;var i,a=function(t,e){var r;if(void 0===he()||null==h()(t)){if(le()(t)||(r=function(t,e){var r;if(t){if("string"==typeof t)return rn(t,e);var n=ve()(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Tt()(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=ue()(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}(this.dataArray);try{for(a.s();!(i=a.n()).done;){var o=i.value;if(!o||!(o.pathLength<5e-5||r+o.pathLength+5e-5<t)){var s=t-r,u=0;switch(o.type){case Er.LINE_TO:n=this.getPointOnLine(s,o.start.x,o.start.y,o.points[0],o.points[1],o.start.x,o.start.y);break;case Er.ARC:var c=o.points[4],l=o.points[5],f=o.points[4]+l;if(u=c+s/o.pathLength*l,l<0&&u<f||l>=0&&u>f)break;n=this.getPointOnEllipticalArc(o.points[0],o.points[1],o.points[2],o.points[3],u,o.points[6]);break;case Er.CURVE_TO:(u=s/o.pathLength)>1&&(u=1),n=this.getPointOnCubicBezier(u,o.start.x,o.start.y,o.points[0],o.points[1],o.points[2],o.points[3],o.points[4],o.points[5]);break;case Er.QUAD_TO:(u=s/o.pathLength)>1&&(u=1),n=this.getPointOnQuadraticBezier(u,o.start.x,o.start.y,o.points[0],o.points[1],o.points[2],o.points[3])}if(n)return n;break}r+=o.pathLength}}catch(t){a.e(t)}finally{a.f()}return null}},{key:"getLineLength",value:function(t,e,r,n){return Math.sqrt((r-t)*(r-t)+(n-e)*(n-e))}},{key:"getPathLength",value:function(){var t;return-1===this.pathLength&&(this.pathLength=Q()(t=this.dataArray).call(t,(function(t,e){return e.pathLength>0?t+e.pathLength:t}),0)),this.pathLength}},{key:"getPointOnCubicBezier",value:function(t,e,r,n,i,a,o,s,u){return{x:s*Qe(t)+a*We(t)+n*Ge(t)+e*$e(t),y:u*Qe(t)+o*We(t)+i*Ge(t)+r*$e(t)}}},{key:"getPointOnQuadraticBezier",value:function(t,e,r,n,i,a,o){return{x:a*Ze(t)+n*Ke(t)+e*Je(t),y:o*Ze(t)+i*Ke(t)+r*Je(t)}}},{key:"getPointOnEllipticalArc",value:function(t,e,r,n,i,a){var o=Math.cos(a),s=Math.sin(a),u=r*Math.cos(i),c=n*Math.sin(i);return{x:t+(u*o-c*s),y:e+(u*s+c*o)}}},{key:"buildEquidistantCache",value:function(t,e){var r=this.getPathLength(),n=e||.25,i=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==i||this.equidistantCache.precision!==n){this.equidistantCache={step:i,precision:n,points:[]};for(var a=0,o=0;o<=r;o+=n){var s=this.getPointOnPath(o),u=this.getPointOnPath(o+n);s&&u&&(a+=this.getLineLength(s.x,s.y,u.x,u.y))>=i&&(this.equidistantCache.points.push({x:s.x,y:s.y,distance:o}),a-=i)}}}},{key:"getEquidistantPointOnPath",value:function(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var n=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[n]||null}}]),i}(Pr);var sn=function(t){pt(o,t);var e,r,n,i,a=(n=o,i=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=xt(n);if(i){var r=xt(this).constructor;t=ct()(e,arguments,r)}else t=e.apply(this,arguments);return dt(this,t)});function o(t,e,r){var n;B(this,o),(n=a.call(this,t,e,r)).type="image",n.loaded=!1;var i=n.getHrefAttribute().getString();if(!i)return dt(n);var s=/\.svg$/.test(i);return t.images.push(gt(n)),s?n.loadSvg(i):n.loadImage(i),n.isSvg=s,n}return H(o,[{key:"loadImage",value:(r=z(D().mark((function t(e){var r;return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.document.createImage(e);case 3:r=t.sent,this.image=r,t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),console.error('Error while loading image "'.concat(e,'":'),t.t0);case 10:this.loaded=!0;case 11:case"end":return t.stop()}}),t,this,[[0,7]])}))),function(t){return r.apply(this,arguments)})},{key:"loadSvg",value:(e=z(D().mark((function t(e){var r,n;return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.document.fetch(e);case 3:return r=t.sent,t.next=6,r.text();case 6:n=t.sent,this.image=n,t.next=13;break;case 10:t.prev=10,t.t0=t.catch(0),console.error('Error while loading image "'.concat(e,'":'),t.t0);case 13:this.loaded=!0;case 14:case"end":return t.stop()}}),t,this,[[0,10]])}))),function(t){return e.apply(this,arguments)})},{key:"renderChildren",value:function(t){var e=this.document,r=this.image,n=this.loaded,i=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),o=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(n&&r&&o&&s){if(t.save(),this.isSvg)e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:i,offsetY:a,scaleWidth:o,scaleHeight:s}).render();else{var u=this.image;t.translate(i,a),e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:o,desiredWidth:u.width,height:s,desiredHeight:u.height}),this.loaded&&(void 0===u.complete||u.complete)&&t.drawImage(u,0,0)}t.restore()}}},{key:"getBoundingBox",value:function(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),n=this.getStyle("height").getPixels("y");return new kr(t,e,t+r,e+n)}}]),o}(Tr);var un=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="symbol",t}return H(i,[{key:"render",value:function(t){}}]),i}(Tr),cn=function(){function t(e){B(this,t),this.document=e,this.loaded=!1,e.fonts.push(this)}var e;return H(t,[{key:"load",value:(e=z(D().mark((function t(e,r){var n,i,a,o;return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,i=this.document,t.next=4,i.canvg.parser.load(r);case 4:a=t.sent,o=a.getElementsByTagName("font"),T()(n=Tt()(o)).call(n,(function(t){var r=i.createElement(t);i.definitions[e]=r})),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(0),console.error('Error while loading font "'.concat(r,'":'),t.t0);case 12:this.loaded=!0;case 13:case"end":return t.stop()}}),t,this,[[0,9]])}))),function(t,r){return e.apply(this,arguments)})}]),t}();var ln=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a,o;B(this,i),(o=n.call(this,t,e,r)).type="style";var s=Pe(u()(a=Tt()(e.childNodes)).call(a,(function(t){return t.data})).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}");return T()(s).call(s,(function(e){var r=at()(e).call(e);if(r){var n=r.split("{"),i=n[0].split(","),a=n[1].split(";");T()(i).call(i,(function(e){var r=at()(e).call(e);if(r){var n=t.styles[r]||{};if(T()(a).call(a,(function(e){var r,i,a=Et()(e).call(e,":"),o=at()(r=e.substr(0,a)).call(r),s=at()(i=e.substr(a+1,e.length-a)).call(i);o&&s&&(n[o]=new tr(t,o,s))})),t.styles[r]=n,t.stylesSpecificity[r]=Ue(r),"@font-face"===r){var i=n["font-family"].getString().replace(/"|'/g,""),o=n.src.getString().split(",");T()(o).call(o,(function(e){if(Et()(e).call(e,'format("svg")')>0){var r=Re(e);r&&new cn(t).load(i,r)}}))}}}))}})),o}return i}(mr);ln.parseExternalUrl=Re;var fn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="use",t}return H(i,[{key:"setContext",value:function(t){Rt(xt(i.prototype),"setContext",this).call(this,t);var e=this.getAttribute("x"),r=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),r.hasValue()&&t.translate(0,r.getPixels("y"))}},{key:"path",value:function(t){var e=this.element;e&&e.path(t)}},{key:"renderChildren",value:function(t){var e=this.document,r=this.element;if(r){var n=r;if("symbol"===r.type&&((n=new Nr(e,null)).attributes.viewBox=new tr(e,"viewBox",r.getAttribute("viewBox").getString()),n.attributes.preserveAspectRatio=new tr(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),n.attributes.overflow=new tr(e,"overflow",r.getAttribute("overflow").getString()),n.children=r.children,r.styles.opacity=new tr(e,"opacity",this.calculateOpacity())),"svg"===n.type){var i=this.getStyle("width",!1,!0),a=this.getStyle("height",!1,!0);i.hasValue()&&(n.attributes.width=new tr(e,"width",i.getString())),a.hasValue()&&(n.attributes.height=new tr(e,"height",a.getString()))}var o=n.parent;n.parent=this,n.render(t),n.parent=o}}},{key:"getBoundingBox",value:function(t){var e=this.element;return e?e.getBoundingBox(t):null}},{key:"elementTransform",value:function(){var t=this.document,e=this.element;return dr.fromElement(t,e)}},{key:"element",get:function(){return this._element||(this._element=this.getHrefAttribute().getDefinition()),this._element}}]),i}(Tr);function hn(t,e,r,n,i,a){return t[r*n*4+4*e+a]}function pn(t,e,r,n,i,a,o){t[r*n*4+4*e+a]=o}function vn(t,e,r){return t[e]*r}function yn(t,e,r,n){return e+Math.cos(t)*r+Math.sin(t)*n}var gn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;B(this,i),(a=n.call(this,t,e,r)).type="feColorMatrix";var o=Ee(a.getAttribute("values").getString());switch(a.getAttribute("type").getString("matrix")){case"saturate":var s=o[0];o=[.213+.787*s,.715-.715*s,.072-.072*s,0,0,.213-.213*s,.715+.285*s,.072-.072*s,0,0,.213-.213*s,.715-.715*s,.072+.928*s,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var u=o[0]*Math.PI/180;o=[yn(u,.213,.787,-.213),yn(u,.715,-.715,-.715),yn(u,.072,-.072,.928),0,0,yn(u,.213,-.213,.143),yn(u,.715,.285,.14),yn(u,.072,-.072,-.283),0,0,yn(u,.213,-.213,-.787),yn(u,.715,-.715,.715),yn(u,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}return a.matrix=o,a.includeOpacity=a.getAttribute("includeOpacity").hasValue(),a}return H(i,[{key:"apply",value:function(t,e,r,n,i){for(var a=this.includeOpacity,o=this.matrix,s=t.getImageData(0,0,n,i),u=0;u<i;u++)for(var c=0;c<n;c++){var l=hn(s.data,c,u,n,0,0),f=hn(s.data,c,u,n,0,1),h=hn(s.data,c,u,n,0,2),p=hn(s.data,c,u,n,0,3),v=vn(o,0,l)+vn(o,1,f)+vn(o,2,h)+vn(o,3,p)+vn(o,4,1),y=vn(o,5,l)+vn(o,6,f)+vn(o,7,h)+vn(o,8,p)+vn(o,9,1),g=vn(o,10,l)+vn(o,11,f)+vn(o,12,h)+vn(o,13,p)+vn(o,14,1),d=vn(o,15,l)+vn(o,16,f)+vn(o,17,h)+vn(o,18,p)+vn(o,19,1);a&&(v=y=g=0,d*=p/255),pn(s.data,c,u,n,0,0,v),pn(s.data,c,u,n,0,1,y),pn(s.data,c,u,n,0,2,g),pn(s.data,c,u,n,0,3,d)}t.clearRect(0,0,n,i),t.putImageData(s,0,0)}}]),i}(mr);var dn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="mask",t}return H(i,[{key:"apply",value:function(t,e){var r=this.document,n=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),o=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(!o&&!s){var u,c=new kr;T()(u=this.children).call(u,(function(e){c.addBoundingBox(e.getBoundingBox(t))})),n=Math.floor(c.x1),a=Math.floor(c.y1),o=Math.floor(c.width),s=Math.floor(c.height)}var l=this.removeStyles(e,i.ignoreStyles),f=r.createCanvas(n+o,a+s),h=f.getContext("2d");r.screen.setDefaults(h),this.renderChildren(h),new gn(r,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(h,0,0,n+o,a+s);var p=r.createCanvas(n+o,a+s),v=p.getContext("2d");r.screen.setDefaults(v),e.render(v),v.globalCompositeOperation="destination-in",v.fillStyle=h.createPattern(f,"no-repeat"),v.fillRect(0,0,n+o,a+s),t.fillStyle=v.createPattern(p,"no-repeat"),t.fillRect(0,0,n+o,a+s),this.restoreStyles(e,l)}},{key:"render",value:function(t){}}]),i}(mr);dn.ignoreStyles=["mask","transform","clip-path"];var mn=function(){},xn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="clipPath",t}return H(i,[{key:"apply",value:function(t){var e,r=this.document,n=be()(t),i=t.beginPath,a=t.closePath;n&&(n.beginPath=mn,n.closePath=mn),me()(i,t,[]),T()(e=this.children).call(e,(function(e){if(void 0!==e.path){var i=void 0!==e.elementTransform?e.elementTransform():null;i||(i=dr.fromElement(r,e)),i&&i.apply(t),e.path(t),n&&(n.closePath=a),i&&i.unapply(t)}})),me()(a,t,[]),t.clip(),n&&(n.beginPath=i,n.closePath=a)}},{key:"render",value:function(t){}}]),i}(mr);var bn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="filter",t}return H(i,[{key:"apply",value:function(t,e){var r=this.document,n=this.children,a=e.getBoundingBox(t);if(a){var o=0,s=0;T()(n).call(n,(function(t){var e=t.extraFilterDistance||0;o=Math.max(o,e),s=Math.max(s,e)}));var u=Math.floor(a.width),c=Math.floor(a.height),l=u+2*o,f=c+2*s;if(!(l<1||f<1)){var h=Math.floor(a.x),p=Math.floor(a.y),v=this.removeStyles(e,i.ignoreStyles),y=r.createCanvas(l,f),g=y.getContext("2d");r.screen.setDefaults(g),g.translate(-h+o,-p+s),e.render(g),T()(n).call(n,(function(t){"function"==typeof t.apply&&t.apply(g,0,0,l,f)})),t.drawImage(y,0,0,l,f,h-o,p-s,l,f),this.restoreStyles(e,v)}}}},{key:"render",value:function(t){}}]),i}(mr);bn.ignoreStyles=["filter","transform","clip-path"];var Sn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="feDropShadow",a.addStylesFromStyleDefinition(),a}return H(i,[{key:"apply",value:function(t,e,r,n,i){}}]),i}(mr);var wn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="feMorphology",t}return H(i,[{key:"apply",value:function(t,e,r,n,i){}}]),i}(mr);var An=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="feComposite",t}return H(i,[{key:"apply",value:function(t,e,r,n,i){}}]),i}(mr);var kn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(t,e,r){var a;return B(this,i),(a=n.call(this,t,e,r)).type="feGaussianBlur",a.blurRadius=Math.floor(a.getAttribute("stdDeviation").getNumber()),a.extraFilterDistance=a.blurRadius,a}return H(i,[{key:"apply",value:function(t,e,r,n,i){var a=this.document,o=this.blurRadius,s=a.window?a.window.document.body:null,u=t.canvas;u.id=a.getUniqueId(),s&&(u.style.display="none",s.appendChild(u)),ke(u,e,r,n,i,o),s&&s.removeChild(u)}}]),i}(mr);var Tn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="title",t}return i}(mr);var Pn=function(t){pt(i,t);var e,r,n=(e=i,r=function(){if("undefined"==typeof Reflect||!ct())return!1;if(ct().sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(ct()(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=xt(e);if(r){var i=xt(this).constructor;t=ct()(n,arguments,i)}else t=n.apply(this,arguments);return dt(this,t)});function i(){var t;return B(this,i),(t=n.apply(this,arguments)).type="desc",t}return i}(mr),On={svg:Nr,rect:Rr,circle:_r,ellipse:Vr,line:Dr,polyline:Ir,polygon:Lr,path:Mr,pattern:zr,marker:jr,defs:Fr,linearGradient:Hr,radialGradient:Xr,stop:Yr,animate:qr,animateColor:Qr,animateTransform:Wr,font:$r,"font-face":Zr,"missing-glyph":Kr,glyph:Jr,text:Pr,tspan:Or,tref:tn,a:en,textPath:on,image:sn,g:Br,symbol:un,style:ln,use:fn,mask:dn,clipPath:xn,filter:bn,feDropShadow:Sn,feMorphology:wn,feComposite:An,feColorMatrix:gn,feGaussianBlur:kn,title:Tn,desc:Pn};function Cn(t,e){var r=_()(t);if(N()){var n=N()(t);e&&(n=E()(n).call(n,(function(e){return O()(t,e).enumerable}))),r.push.apply(r,n)}return r}function En(){return(En=z(D().mark((function t(e){var r,n,i=arguments;return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=i.length>1&&void 0!==i[1]&&i[1],n=document.createElement("img"),r&&(n.crossOrigin="Anonymous"),t.abrupt("return",new(J())((function(t,r){n.onload=function(){t(n)},n.onerror=function(){r()},n.src=e})));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var Mn=function(){function t(e){var r,n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=i.rootEmSize,o=void 0===a?12:a,s=i.emSize,u=void 0===s?12:s,c=i.createCanvas,l=void 0===c?t.createCanvas:c,f=i.createImage,h=void 0===f?t.createImage:f,p=i.anonymousCrossOrigin;B(this,t),this.canvg=e,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=e.screen,this.rootEmSize=o,this.emSize=u,this.createCanvas=l,this.createImage=this.bindCreateImage(h,p),this.screen.wait(et()(r=this.isImagesLoaded).call(r,this)),this.screen.wait(et()(n=this.isFontsLoaded).call(n,this))}return H(t,[{key:"bindCreateImage",value:function(t,e){return"boolean"==typeof e?function(r,n){return t(r,"boolean"==typeof n?n:e)}:t}},{key:"popEmSize",value:function(){this.emSizeStack.pop()}},{key:"getUniqueId",value:function(){return"canvg".concat(++this.uniqueId)}},{key:"isImagesLoaded",value:function(){var t;return Z()(t=this.images).call(t,(function(t){return t.loaded}))}},{key:"isFontsLoaded",value:function(){var t;return Z()(t=this.fonts).call(t,(function(t){return t.loaded}))}},{key:"createDocumentElement",value:function(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}},{key:"createElement",value:function(e){var r=e.nodeName.replace(/^[^:]+:/,""),n=t.elementTypes[r];return void 0!==n?new n(this,e):new xr(this,e)}},{key:"createTextNode",value:function(t){return new Cr(this,t)}},{key:"setViewBox",value:function(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r,n=null!=arguments[e]?arguments[e]:{};if(e%2)T()(r=Cn(Object(n),!0)).call(r,(function(e){F(t,e,n[e])}));else if(A())S()(t,A()(n));else{var i;T()(i=Cn(Object(n))).call(i,(function(e){x()(t,e,O()(n,e))}))}}return t}({document:this},t))}},{key:"window",get:function(){return this.screen.window}},{key:"fetch",get:function(){return this.screen.fetch}},{key:"ctx",get:function(){return this.screen.ctx}},{key:"emSize",get:function(){var t=this.emSizeStack;return t[t.length-1]},set:function(t){this.emSizeStack.push(t)}}]),t}();function Nn(t,e){var r=_()(t);if(N()){var n=N()(t);e&&(n=E()(n).call(n,(function(e){return O()(t,e).enumerable}))),r.push.apply(r,n)}return r}function Rn(t){for(var e=1;e<arguments.length;e++){var r,n=null!=arguments[e]?arguments[e]:{};if(e%2)T()(r=Nn(Object(n),!0)).call(r,(function(e){F(t,e,n[e])}));else if(A())S()(t,A()(n));else{var i;T()(i=Nn(Object(n))).call(i,(function(e){x()(t,e,O()(n,e))}))}}return t}Mn.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},Mn.createImage=function(t){return En.apply(this,arguments)},Mn.elementTypes=On;var _n=function(){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};B(this,t),this.parser=new cr(n),this.screen=new or(e,n),this.options=n;var i=new Mn(this,n),a=i.createDocumentElement(r);this.document=i,this.documentElement=a}var e,r;return H(t,[{key:"fork",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.from(e,r,Rn(Rn({},this.options),n))}},{key:"forkString",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.fromString(e,r,Rn(Rn({},this.options),n))}},{key:"ready",value:function(){return this.screen.ready()}},{key:"isReady",value:function(){return this.screen.isReady()}},{key:"render",value:(r=z(D().mark((function t(){var e,r=arguments;return D().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=r.length>0&&void 0!==r[0]?r[0]:{},this.start(Rn({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},e)),t.next=4,this.ready();case 4:this.stop();case 5:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"start",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this.documentElement,r=this.screen,n=this.options;r.start(e,Rn(Rn({enableRedraw:!0},n),t))}},{key:"stop",value:function(){this.screen.stop()}},{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}],[{key:"from",value:(e=z(D().mark((function e(r,n){var i,a,o,s=arguments;return D().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=s.length>2&&void 0!==s[2]?s[2]:{},a=new cr(i),e.next=4,a.parse(n);case 4:return o=e.sent,e.abrupt("return",new t(r,o,i));case 6:case"end":return e.stop()}}),e)}))),function(t,r){return e.apply(this,arguments)})},{key:"fromString",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new cr(n),a=i.parseFromString(r);return new t(e,a,n)}}]),t}(),Vn=Object.freeze({__proto__:null,offscreen:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.DOMParser,r={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,createCanvas:function(t,e){return new OffscreenCanvas(t,e)},createImage:function(t){return z(D().mark((function e(){var r,n,i;return D().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:return r=e.sent,e.next=5,r.blob();case 5:return n=e.sent,e.next=8,createImageBitmap(n);case 8:return i=e.sent,e.abrupt("return",i);case 10:case"end":return e.stop()}}),e)})))()}};return"undefined"==typeof DOMParser&&void 0!==e||re()(r,"DOMParser"),r},node:function(t){var e=t.DOMParser,r=t.canvas;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:t.fetch,createCanvas:r.createCanvas,createImage:r.loadImage}}});const Dn=_n},54493:(t,e,r)=>{r(77971),r(53242);var n=r(54058);t.exports=n.Array.from},24034:(t,e,r)=>{r(92737);var n=r(54058);t.exports=n.Array.isArray},15367:(t,e,r)=>{r(85906);var n=r(35703);t.exports=n("Array").concat},51459:(t,e,r)=>{r(48851);var n=r(35703);t.exports=n("Array").every},6172:(t,e,r)=>{r(80290);var n=r(35703);t.exports=n("Array").fill},62383:(t,e,r)=>{r(21501);var n=r(35703);t.exports=n("Array").filter},99324:(t,e,r)=>{r(2437);var n=r(35703);t.exports=n("Array").forEach},80991:(t,e,r)=>{r(97690);var n=r(35703);t.exports=n("Array").includes},8700:(t,e,r)=>{r(99076);var n=r(35703);t.exports=n("Array").indexOf},23866:(t,e,r)=>{r(68787);var n=r(35703);t.exports=n("Array").map},30891:(t,e,r)=>{r(81876);var n=r(35703);t.exports=n("Array").reduce},91876:(t,e,r)=>{r(11490);var n=r(35703);t.exports=n("Array").reverse},24900:(t,e,r)=>{r(60186);var n=r(35703);t.exports=n("Array").slice},3824:(t,e,r)=>{r(66960);var n=r(35703);t.exports=n("Array").some},14423:(t,e,r)=>{r(66274);var n=r(35703);t.exports=n("Array").values},81103:(t,e,r)=>{r(95160);var n=r(54058);t.exports=n.Date.now},27700:(t,e,r)=>{r(73381);var n=r(35703);t.exports=n("Function").bind},16246:(t,e,r)=>{var n=r(27700),i=Function.prototype;t.exports=function(t){var e=t.bind;return t===i||t instanceof Function&&e===i.bind?n:e}},56043:(t,e,r)=>{var n=r(15367),i=Array.prototype;t.exports=function(t){var e=t.concat;return t===i||t instanceof Array&&e===i.concat?n:e}},13160:(t,e,r)=>{var n=r(51459),i=Array.prototype;t.exports=function(t){var e=t.every;return t===i||t instanceof Array&&e===i.every?n:e}},80446:(t,e,r)=>{var n=r(6172),i=Array.prototype;t.exports=function(t){var e=t.fill;return t===i||t instanceof Array&&e===i.fill?n:e}},2480:(t,e,r)=>{var n=r(62383),i=Array.prototype;t.exports=function(t){var e=t.filter;return t===i||t instanceof Array&&e===i.filter?n:e}},58557:(t,e,r)=>{var n=r(80991),i=r(21631),a=Array.prototype,o=String.prototype;t.exports=function(t){var e=t.includes;return t===a||t instanceof Array&&e===a.includes?n:"string"==typeof t||t===o||t instanceof String&&e===o.includes?i:e}},34570:(t,e,r)=>{var n=r(8700),i=Array.prototype;t.exports=function(t){var e=t.indexOf;return t===i||t instanceof Array&&e===i.indexOf?n:e}},88287:(t,e,r)=>{var n=r(23866),i=Array.prototype;t.exports=function(t){var e=t.map;return t===i||t instanceof Array&&e===i.map?n:e}},68025:(t,e,r)=>{var n=r(30891),i=Array.prototype;t.exports=function(t){var e=t.reduce;return t===i||t instanceof Array&&e===i.reduce?n:e}},91060:(t,e,r)=>{var n=r(91876),i=Array.prototype;t.exports=function(t){var e=t.reverse;return t===i||t instanceof Array&&e===i.reverse?n:e}},69601:(t,e,r)=>{var n=r(24900),i=Array.prototype;t.exports=function(t){var e=t.slice;return t===i||t instanceof Array&&e===i.slice?n:e}},28299:(t,e,r)=>{var n=r(3824),i=Array.prototype;t.exports=function(t){var e=t.some;return t===i||t instanceof Array&&e===i.some?n:e}},71611:(t,e,r)=>{var n=r(3269),i=String.prototype;t.exports=function(t){var e=t.startsWith;return"string"==typeof t||t===i||t instanceof String&&e===i.startsWith?n:e}},62774:(t,e,r)=>{var n=r(13348),i=String.prototype;t.exports=function(t){var e=t.trim;return"string"==typeof t||t===i||t instanceof String&&e===i.trim?n:e}},91018:(t,e,r)=>{r(37501),r(55967),r(77971),r(7634);var n=r(54058);t.exports=n.Map},35254:(t,e,r)=>{r(53882);var n=r(54058).Object;t.exports=function(t,e){return n.create(t,e)}},7702:(t,e,r)=>{r(74979);var n=r(54058).Object,i=t.exports=function(t,e){return n.defineProperties(t,e)};n.defineProperties.sham&&(i.sham=!0)},48171:(t,e,r)=>{r(86450);var n=r(54058).Object,i=t.exports=function(t,e,r){return n.defineProperty(t,e,r)};n.defineProperty.sham&&(i.sham=!0)},286:(t,e,r)=>{r(46924);var n=r(54058).Object,i=t.exports=function(t,e){return n.getOwnPropertyDescriptor(t,e)};n.getOwnPropertyDescriptor.sham&&(i.sham=!0)},92766:(t,e,r)=>{r(88482);var n=r(54058);t.exports=n.Object.getOwnPropertyDescriptors},30498:(t,e,r)=>{r(35824);var n=r(54058);t.exports=n.Object.getOwnPropertySymbols},13966:(t,e,r)=>{r(17405);var n=r(54058);t.exports=n.Object.getPrototypeOf},48494:(t,e,r)=>{r(21724);var n=r(54058);t.exports=n.Object.keys},3065:(t,e,r)=>{r(90108);var n=r(54058);t.exports=n.Object.setPrototypeOf},7579:(t,e,r)=>{r(49718);var n=r(54058);t.exports=n.parseFloat},98524:(t,e,r)=>{r(14038);var n=r(54058);t.exports=n.parseInt},52956:(t,e,r)=>{r(47627),r(55967),r(98881),r(4560),r(91302),r(44349),r(77971),r(7634);var n=r(54058);t.exports=n.Promise},6238:(t,e,r)=>{r(46160);var n=r(54058);t.exports=n.Reflect.apply},14983:(t,e,r)=>{r(7453);var n=r(54058);t.exports=n.Reflect.construct},74734:(t,e,r)=>{r(2079);var n=r(54058);t.exports=n.Reflect.deleteProperty},61189:(t,e,r)=>{r(13593);var n=r(54058);t.exports=n.Reflect.getPrototypeOf},37095:(t,e,r)=>{r(42355);var n=r(54058);t.exports=n.Reflect.get},21631:(t,e,r)=>{r(11035);var n=r(35703);t.exports=n("String").includes},3269:(t,e,r)=>{r(94761);var n=r(35703);t.exports=n("String").startsWith},13348:(t,e,r)=>{r(57398);var n=r(35703);t.exports=n("String").trim},57473:(t,e,r)=>{r(85906),r(55967),r(35824),r(8555),r(52615),r(21732),r(35903),r(1825),r(28394),r(45915),r(61766),r(62737),r(89911),r(74315),r(63131),r(64714),r(70659),r(69120),r(79413),r(1502);var n=r(54058);t.exports=n.Symbol},24227:(t,e,r)=>{r(1825),r(77971),r(7634);var n=r(11477);t.exports=n.f("iterator")},27385:(t,e,r)=>{var n=r(54493);t.exports=n},81522:(t,e,r)=>{var n=r(24034);t.exports=n},32209:(t,e,r)=>{r(7634),r(77971);var n=r(22902);t.exports=n},1258:(t,e,r)=>{r(7634),r(77971);var n=r(53476);t.exports=n},81493:(t,e,r)=>{var n=r(69601);t.exports=n},76094:(t,e,r)=>{var n=r(35254);t.exports=n},73685:(t,e,r)=>{var n=r(48171);t.exports=n},27533:(t,e,r)=>{var n=r(286);t.exports=n},74303:(t,e,r)=>{var n=r(13966);t.exports=n},55122:(t,e,r)=>{var n=r(3065);t.exports=n},29531:(t,e,r)=>{var n=r(52956);r(89731),r(55708),r(30014),r(88731),t.exports=n},31524:(t,e,r)=>{var n=r(37095);t.exports=n},86600:(t,e,r)=>{var n=r(57473);r(28783),r(43975),r(46774),r(80620),r(36172),t.exports=n},9759:(t,e,r)=>{var n=r(24227);t.exports=n},33916:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},11851:(t,e,r)=>{var n=r(10941);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},18479:t=>{t.exports=function(){}},5743:t=>{t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},96059:(t,e,r)=>{var n=r(10941);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},91860:(t,e,r)=>{"use strict";var n=r(89678),i=r(59413),a=r(43057);t.exports=function(t){for(var e=n(this),r=a(e.length),o=arguments.length,s=i(o>1?arguments[1]:void 0,r),u=o>2?arguments[2]:void 0,c=void 0===u?r:i(u,r);c>s;)e[s++]=t;return e}},56837:(t,e,r)=>{"use strict";var n=r(3610).forEach,i=r(34194)("forEach");t.exports=i?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},11354:(t,e,r)=>{"use strict";var n=r(86843),i=r(89678),a=r(75196),o=r(6782),s=r(43057),u=r(55449),c=r(22902);t.exports=function(t){var e,r,l,f,h,p,v=i(t),y="function"==typeof this?this:Array,g=arguments.length,d=g>1?arguments[1]:void 0,m=void 0!==d,x=c(v),b=0;if(m&&(d=n(d,g>2?arguments[2]:void 0,2)),null==x||y==Array&&o(x))for(r=new y(e=s(v.length));e>b;b++)p=m?d(v[b],b):v[b],u(r,b,p);else for(h=(f=x.call(v)).next,r=new y;!(l=h.call(f)).done;b++)p=m?a(f,d,[l.value,b],!0):l.value,u(r,b,p);return r.length=b,r}},31692:(t,e,r)=>{var n=r(74529),i=r(43057),a=r(59413),o=function(t){return function(e,r,o){var s,u=n(e),c=i(u.length),l=a(o,c);if(t&&r!=r){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:o(!0),indexOf:o(!1)}},3610:(t,e,r)=>{var n=r(86843),i=r(37026),a=r(89678),o=r(43057),s=r(64692),u=[].push,c=function(t){var e=1==t,r=2==t,c=3==t,l=4==t,f=6==t,h=7==t,p=5==t||f;return function(v,y,g,d){for(var m,x,b=a(v),S=i(b),w=n(y,g,3),A=o(S.length),k=0,T=d||s,P=e?T(v,A):r||h?T(v,0):void 0;A>k;k++)if((p||k in S)&&(x=w(m=S[k],k,b),t))if(e)P[k]=x;else if(x)switch(t){case 3:return!0;case 5:return m;case 6:return k;case 2:u.call(P,m)}else switch(t){case 4:return!1;case 7:u.call(P,m)}return f?-1:c||l?l:P}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},50568:(t,e,r)=>{var n=r(95981),i=r(99813),a=r(53385),o=i("species");t.exports=function(t){return a>=51||!n((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},34194:(t,e,r)=>{"use strict";var n=r(95981);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},46499:(t,e,r)=>{var n=r(33916),i=r(89678),a=r(37026),o=r(43057),s=function(t){return function(e,r,s,u){n(r);var c=i(e),l=a(c),f=o(c.length),h=t?f-1:0,p=t?-1:1;if(s<2)for(;;){if(h in l){u=l[h],h+=p;break}if(h+=p,t?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:f>h;h+=p)h in l&&(u=r(u,l[h],h,c));return u}};t.exports={left:s(!1),right:s(!0)}},64692:(t,e,r)=>{var n=r(10941),i=r(1052),a=r(99813)("species");t.exports=function(t,e){var r;return i(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[a])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},75196:(t,e,r)=>{var n=r(96059),i=r(7609);t.exports=function(t,e,r,a){try{return a?e(n(r)[0],r[1]):e(r)}catch(e){throw i(t),e}}},21385:(t,e,r)=>{var n=r(99813)("iterator"),i=!1;try{var a=0,o={next:function(){return{done:!!a++}},return:function(){i=!0}};o[n]=function(){return this},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},82532:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},9697:(t,e,r)=>{var n=r(22885),i=r(82532),a=r(99813)("toStringTag"),o="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),a))?r:o?i(e):"Object"==(n=i(e))&&"function"==typeof e.callee?"Arguments":n}},85616:(t,e,r)=>{"use strict";var n=r(65988).f,i=r(29290),a=r(87524),o=r(86843),s=r(5743),u=r(93091),c=r(47771),l=r(94431),f=r(55746),h=r(21647).fastKey,p=r(45402),v=p.set,y=p.getterFor;t.exports={getConstructor:function(t,e,r,c){var l=t((function(t,n){s(t,l,e),v(t,{type:e,index:i(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=n&&u(n,t[c],{that:t,AS_ENTRIES:r})})),p=y(e),g=function(t,e,r){var n,i,a=p(t),o=d(t,e);return o?o.value=r:(a.last=o={index:i=h(e,!0),key:e,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=o),n&&(n.next=o),f?a.size++:t.size++,"F"!==i&&(a.index[i]=o)),t},d=function(t,e){var r,n=p(t),i=h(e);if("F"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key==e)return r};return a(l.prototype,{clear:function(){for(var t=p(this),e=t.index,r=t.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete e[r.index],r=r.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,r=p(e),n=d(e,t);if(n){var i=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=i),i&&(i.previous=a),r.first==n&&(r.first=i),r.last==n&&(r.last=a),f?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=p(this),n=o(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!d(this,t)}}),a(l.prototype,r?{get:function(t){var e=d(this,t);return e&&e.value},set:function(t,e){return g(this,0===t?0:t,e)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&n(l.prototype,"size",{get:function(){return p(this).size}}),l},setStrong:function(t,e,r){var n=e+" Iterator",i=y(e),a=y(n);c(t,e,(function(t,e){v(this,{type:n,target:t,state:i(t),kind:e,last:void 0})}),(function(){for(var t=a(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?"keys"==e?{value:r.key,done:!1}:"values"==e?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),l(e)}}},24683:(t,e,r)=>{"use strict";var n=r(76887),i=r(21899),a=r(21647),o=r(95981),s=r(32029),u=r(93091),c=r(5743),l=r(10941),f=r(90904),h=r(65988).f,p=r(3610).forEach,v=r(55746),y=r(45402),g=y.set,d=y.getterFor;t.exports=function(t,e,r){var y,m=-1!==t.indexOf("Map"),x=-1!==t.indexOf("Weak"),b=m?"set":"add",S=i[t],w=S&&S.prototype,A={};if(v&&"function"==typeof S&&(x||w.forEach&&!o((function(){(new S).entries().next()})))){y=e((function(e,r){g(c(e,y,t),{type:t,collection:new S}),null!=r&&u(r,e[b],{that:e,AS_ENTRIES:m})}));var k=d(t);p(["add","clear","delete","forEach","get","has","set","keys","values","entries"],(function(t){var e="add"==t||"set"==t;!(t in w)||x&&"clear"==t||s(y.prototype,t,(function(r,n){var i=k(this).collection;if(!e&&x&&!l(r))return"get"==t&&void 0;var a=i[t](0===r?0:r,n);return e?this:a}))})),x||h(y.prototype,"size",{configurable:!0,get:function(){return k(this).collection.size}})}else y=r.getConstructor(e,t,m,b),a.REQUIRED=!0;return f(y,t,!1,!0),A[t]=y,n({global:!0,forced:!0},A),x||r.setStrong(y,t,m),y}},67772:(t,e,r)=>{var n=r(99813)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},64160:(t,e,r)=>{var n=r(95981);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},31046:(t,e,r)=>{"use strict";var n=r(35143).IteratorPrototype,i=r(29290),a=r(31887),o=r(90904),s=r(12077),u=function(){return this};t.exports=function(t,e,r){var c=e+" Iterator";return t.prototype=i(n,{next:a(1,r)}),o(t,c,!1,!0),s[c]=u,t}},32029:(t,e,r)=>{var n=r(55746),i=r(65988),a=r(31887);t.exports=n?function(t,e,r){return i.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},31887:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},55449:(t,e,r)=>{"use strict";var n=r(46935),i=r(65988),a=r(31887);t.exports=function(t,e,r){var o=n(e);o in t?i.f(t,o,a(0,r)):t[o]=r}},47771:(t,e,r)=>{"use strict";var n=r(76887),i=r(31046),a=r(249),o=r(88929),s=r(90904),u=r(32029),c=r(99754),l=r(99813),f=r(82529),h=r(12077),p=r(35143),v=p.IteratorPrototype,y=p.BUGGY_SAFARI_ITERATORS,g=l("iterator"),d="keys",m="values",x="entries",b=function(){return this};t.exports=function(t,e,r,l,p,S,w){i(r,e,l);var A,k,T,P=function(t){if(t===p&&N)return N;if(!y&&t in E)return E[t];switch(t){case d:case m:case x:return function(){return new r(this,t)}}return function(){return new r(this)}},O=e+" Iterator",C=!1,E=t.prototype,M=E[g]||E["@@iterator"]||p&&E[p],N=!y&&M||P(p),R="Array"==e&&E.entries||M;if(R&&(A=a(R.call(new t)),v!==Object.prototype&&A.next&&(f||a(A)===v||(o?o(A,v):"function"!=typeof A[g]&&u(A,g,b)),s(A,O,!0,!0),f&&(h[O]=b))),p==m&&M&&M.name!==m&&(C=!0,N=function(){return M.call(this)}),f&&!w||E[g]===N||u(E,g,N),h[e]=N,p)if(k={values:P(m),keys:S?N:P(d),entries:P(x)},w)for(T in k)(y||C||!(T in E))&&c(E,T,k[T]);else n({target:e,proto:!0,forced:y||C},k);return k}},66349:(t,e,r)=>{var n=r(54058),i=r(47457),a=r(11477),o=r(65988).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});i(e,t)||o(e,t,{value:a.f(t)})}},55746:(t,e,r)=>{var n=r(95981);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},61333:(t,e,r)=>{var n=r(21899),i=r(10941),a=n.document,o=i(a)&&i(a.createElement);t.exports=function(t){return o?a.createElement(t):{}}},63281:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},22749:(t,e,r)=>{var n=r(2861);t.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(n)},6049:(t,e,r)=>{var n=r(82532),i=r(21899);t.exports="process"==n(i.process)},58045:(t,e,r)=>{var n=r(2861);t.exports=/web0s(?!.*chrome)/i.test(n)},2861:(t,e,r)=>{var n=r(626);t.exports=n("navigator","userAgent")||""},53385:(t,e,r)=>{var n,i,a=r(21899),o=r(2861),s=a.process,u=s&&s.versions,c=u&&u.v8;c?i=(n=c.split("."))[0]+n[1]:o&&(!(n=o.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=o.match(/Chrome\/(\d+)/))&&(i=n[1]),t.exports=i&&+i},35703:(t,e,r)=>{var n=r(54058);t.exports=function(t){return n[t+"Prototype"]}},56759:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},76887:(t,e,r)=>{"use strict";var n=r(21899),i=r(49677).f,a=r(37252),o=r(54058),s=r(86843),u=r(32029),c=r(47457),l=function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e};t.exports=function(t,e){var r,f,h,p,v,y,g,d,m=t.target,x=t.global,b=t.stat,S=t.proto,w=x?n:b?n[m]:(n[m]||{}).prototype,A=x?o:o[m]||(o[m]={}),k=A.prototype;for(h in e)r=!a(x?h:m+(b?".":"#")+h,t.forced)&&w&&c(w,h),v=A[h],r&&(y=t.noTargetGet?(d=i(w,h))&&d.value:w[h]),p=r&&y?y:e[h],r&&typeof v==typeof p||(g=t.bind&&r?s(p,n):t.wrap&&r?l(p):S&&"function"==typeof p?s(Function.call,p):p,(t.sham||p&&p.sham||v&&v.sham)&&u(g,"sham",!0),A[h]=g,S&&(c(o,f=m+"Prototype")||u(o,f,{}),o[f][h]=p,t.real&&k&&!k[h]&&u(k,h,p)))}},95981:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},45602:(t,e,r)=>{var n=r(95981);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},86843:(t,e,r)=>{var n=r(33916);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},98308:(t,e,r)=>{"use strict";var n=r(33916),i=r(10941),a=[].slice,o={},s=function(t,e,r){if(!(e in o)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";o[e]=Function("C,a","return new C("+n.join(",")+")")}return o[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=a.call(arguments,1),o=function(){var n=r.concat(a.call(arguments));return this instanceof o?s(e,n.length,n):e.apply(t,n)};return i(e.prototype)&&(o.prototype=e.prototype),o}},626:(t,e,r)=>{var n=r(54058),i=r(21899),a=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?a(n[t])||a(i[t]):n[t]&&n[t][e]||i[t]&&i[t][e]}},22902:(t,e,r)=>{var n=r(9697),i=r(12077),a=r(99813)("iterator");t.exports=function(t){if(null!=t)return t[a]||t["@@iterator"]||i[n(t)]}},53476:(t,e,r)=>{var n=r(96059),i=r(22902);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return n(e.call(t))}},21899:(t,e,r)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},47457:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},27748:t=>{t.exports={}},34845:(t,e,r)=>{var n=r(21899);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},15463:(t,e,r)=>{var n=r(626);t.exports=n("document","documentElement")},2840:(t,e,r)=>{var n=r(55746),i=r(95981),a=r(61333);t.exports=!n&&!i((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},37026:(t,e,r)=>{var n=r(95981),i=r(82532),a="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?a.call(t,""):Object(t)}:Object},81302:(t,e,r)=>{var n=r(63030),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return i.call(t)}),t.exports=n.inspectSource},21647:(t,e,r)=>{var n=r(27748),i=r(10941),a=r(47457),o=r(65988).f,s=r(99418),u=r(45602),c=s("meta"),l=0,f=Object.isExtensible||function(){return!0},h=function(t){o(t,c,{value:{objectID:"O"+ ++l,weakData:{}}})},p=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,c)){if(!f(t))return"F";if(!e)return"E";h(t)}return t[c].objectID},getWeakData:function(t,e){if(!a(t,c)){if(!f(t))return!0;if(!e)return!1;h(t)}return t[c].weakData},onFreeze:function(t){return u&&p.REQUIRED&&f(t)&&!a(t,c)&&h(t),t}};n[c]=!0},45402:(t,e,r)=>{var n,i,a,o=r(38019),s=r(21899),u=r(10941),c=r(32029),l=r(47457),f=r(63030),h=r(44262),p=r(27748),v="Object already initialized",y=s.WeakMap;if(o){var g=f.state||(f.state=new y),d=g.get,m=g.has,x=g.set;n=function(t,e){if(m.call(g,t))throw new TypeError(v);return e.facade=t,x.call(g,t,e),e},i=function(t){return d.call(g,t)||{}},a=function(t){return m.call(g,t)}}else{var b=h("state");p[b]=!0,n=function(t,e){if(l(t,b))throw new TypeError(v);return e.facade=t,c(t,b,e),e},i=function(t){return l(t,b)?t[b]:{}},a=function(t){return l(t,b)}}t.exports={set:n,get:i,has:a,enforce:function(t){return a(t)?i(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},6782:(t,e,r)=>{var n=r(99813),i=r(12077),a=n("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||o[a]===t)}},1052:(t,e,r)=>{var n=r(82532);t.exports=Array.isArray||function(t){return"Array"==n(t)}},37252:(t,e,r)=>{var n=r(95981),i=/#|\.prototype\./,a=function(t,e){var r=s[o(t)];return r==c||r!=u&&("function"==typeof e?n(e):!!e)},o=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";t.exports=a},10941:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},82529:t=>{t.exports=!0},60685:(t,e,r)=>{var n=r(10941),i=r(82532),a=r(99813)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==i(t))}},93091:(t,e,r)=>{var n=r(96059),i=r(6782),a=r(43057),o=r(86843),s=r(22902),u=r(7609),c=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,r){var l,f,h,p,v,y,g,d=r&&r.that,m=!(!r||!r.AS_ENTRIES),x=!(!r||!r.IS_ITERATOR),b=!(!r||!r.INTERRUPTED),S=o(e,d,1+m+b),w=function(t){return l&&u(l),new c(!0,t)},A=function(t){return m?(n(t),b?S(t[0],t[1],w):S(t[0],t[1])):b?S(t,w):S(t)};if(x)l=t;else{if("function"!=typeof(f=s(t)))throw TypeError("Target is not iterable");if(i(f)){for(h=0,p=a(t.length);p>h;h++)if((v=A(t[h]))&&v instanceof c)return v;return new c(!1)}l=f.call(t)}for(y=l.next;!(g=y.call(l)).done;){try{v=A(g.value)}catch(t){throw u(l),t}if("object"==typeof v&&v&&v instanceof c)return v}return new c(!1)}},7609:(t,e,r)=>{var n=r(96059);t.exports=function(t){var e=t.return;if(void 0!==e)return n(e.call(t)).value}},35143:(t,e,r)=>{"use strict";var n,i,a,o=r(95981),s=r(249),u=r(32029),c=r(47457),l=r(99813),f=r(82529),h=l("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(i=s(s(a)))!==Object.prototype&&(n=i):p=!0);var v=null==n||o((function(){var t={};return n[h].call(t)!==t}));v&&(n={}),f&&!v||c(n,h)||u(n,h,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},12077:t=>{t.exports={}},66132:(t,e,r)=>{var n,i,a,o,s,u,c,l,f=r(21899),h=r(49677).f,p=r(42941).set,v=r(22749),y=r(58045),g=r(6049),d=f.MutationObserver||f.WebKitMutationObserver,m=f.document,x=f.process,b=f.Promise,S=h(f,"queueMicrotask"),w=S&&S.value;w||(n=function(){var t,e;for(g&&(t=x.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?o():a=void 0,t}}a=void 0,t&&t.enter()},v||g||y||!d||!m?b&&b.resolve?(c=b.resolve(void 0),l=c.then,o=function(){l.call(c,n)}):o=g?function(){x.nextTick(n)}:function(){p.call(f,n)}:(s=!0,u=m.createTextNode(""),new d(n).observe(u,{characterData:!0}),o=function(){u.data=s=!s})),t.exports=w||function(t){var e={fn:t,next:void 0};a&&(a.next=e),i||(i=e,o()),a=e}},19297:(t,e,r)=>{var n=r(21899);t.exports=n.Promise},72497:(t,e,r)=>{var n=r(6049),i=r(53385),a=r(95981);t.exports=!!Object.getOwnPropertySymbols&&!a((function(){return!Symbol.sham&&(n?38===i:i>37&&i<41)}))},38019:(t,e,r)=>{var n=r(21899),i=r(81302),a=n.WeakMap;t.exports="function"==typeof a&&/native code/.test(i(a))},69520:(t,e,r)=>{"use strict";var n=r(33916),i=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new i(t)}},70344:(t,e,r)=>{var n=r(60685);t.exports=function(t){if(n(t))throw TypeError("The method doesn't accept regular expressions");return t}},81942:(t,e,r)=>{var n=r(21899),i=r(74853).trim,a=r(73483),o=n.parseFloat,s=1/o(a+"-0")!=-1/0;t.exports=s?function(t){var e=i(String(t)),r=o(e);return 0===r&&"-"==e.charAt(0)?-0:r}:o},29806:(t,e,r)=>{var n=r(21899),i=r(74853).trim,a=r(73483),o=n.parseInt,s=/^[+-]?0[Xx]/,u=8!==o(a+"08")||22!==o(a+"0x16");t.exports=u?function(t,e){var r=i(String(t));return o(r,e>>>0||(s.test(r)?16:10))}:o},29290:(t,e,r)=>{var n,i=r(96059),a=r(59938),o=r(56759),s=r(27748),u=r(15463),c=r(61333),l=r(44262)("IE_PROTO"),f=function(){},h=function(t){return"<script>"+t+"<\/script>"},p=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;p=n?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=c("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var r=o.length;r--;)delete p.prototype[o[r]];return p()};s[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=i(t),r=new f,f.prototype=null,r[l]=t):r=p(),void 0===e?r:a(r,e)}},59938:(t,e,r)=>{var n=r(55746),i=r(65988),a=r(96059),o=r(14771);t.exports=n?Object.defineProperties:function(t,e){a(t);for(var r,n=o(e),s=n.length,u=0;s>u;)i.f(t,r=n[u++],e[r]);return t}},65988:(t,e,r)=>{var n=r(55746),i=r(2840),a=r(96059),o=r(46935),s=Object.defineProperty;e.f=n?s:function(t,e,r){if(a(t),e=o(e,!0),a(r),i)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},49677:(t,e,r)=>{var n=r(55746),i=r(36760),a=r(31887),o=r(74529),s=r(46935),u=r(47457),c=r(2840),l=Object.getOwnPropertyDescriptor;e.f=n?l:function(t,e){if(t=o(t),e=s(e,!0),c)try{return l(t,e)}catch(t){}if(u(t,e))return a(!i.f.call(t,e),t[e])}},684:(t,e,r)=>{var n=r(74529),i=r(10946).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},10946:(t,e,r)=>{var n=r(55629),i=r(56759).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},87857:(t,e)=>{e.f=Object.getOwnPropertySymbols},249:(t,e,r)=>{var n=r(47457),i=r(89678),a=r(44262),o=r(64160),s=a("IE_PROTO"),u=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){return t=i(t),n(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},55629:(t,e,r)=>{var n=r(47457),i=r(74529),a=r(31692).indexOf,o=r(27748);t.exports=function(t,e){var r,s=i(t),u=0,c=[];for(r in s)!n(o,r)&&n(s,r)&&c.push(r);for(;e.length>u;)n(s,r=e[u++])&&(~a(c,r)||c.push(r));return c}},14771:(t,e,r)=>{var n=r(55629),i=r(56759);t.exports=Object.keys||function(t){return n(t,i)}},36760:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,i=n&&!r.call({1:2},1);e.f=i?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},88929:(t,e,r)=>{var n=r(96059),i=r(11851);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,a){return n(r),i(a),e?t.call(r,a):r.__proto__=a,r}}():void 0)},95623:(t,e,r)=>{"use strict";var n=r(22885),i=r(9697);t.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},31136:(t,e,r)=>{var n=r(626),i=r(10946),a=r(87857),o=r(96059);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(o(t)),r=a.f;return r?e.concat(r(t)):e}},54058:t=>{t.exports={}},40002:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},56584:(t,e,r)=>{var n=r(96059),i=r(10941),a=r(69520);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},87524:(t,e,r)=>{var n=r(99754);t.exports=function(t,e,r){for(var i in e)r&&r.unsafe&&t[i]?t[i]=e[i]:n(t,i,e[i],r);return t}},99754:(t,e,r)=>{var n=r(32029);t.exports=function(t,e,r,i){i&&i.enumerable?t[e]=r:n(t,e,r)}},48219:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},4911:(t,e,r)=>{var n=r(21899),i=r(32029);t.exports=function(t,e){try{i(n,t,e)}catch(r){n[t]=e}return e}},94431:(t,e,r)=>{"use strict";var n=r(626),i=r(65988),a=r(99813),o=r(55746),s=a("species");t.exports=function(t){var e=n(t),r=i.f;o&&e&&!e[s]&&r(e,s,{configurable:!0,get:function(){return this}})}},90904:(t,e,r)=>{var n=r(22885),i=r(65988).f,a=r(32029),o=r(47457),s=r(95623),u=r(99813)("toStringTag");t.exports=function(t,e,r,c){if(t){var l=r?t:t.prototype;o(l,u)||i(l,u,{configurable:!0,value:e}),c&&!n&&a(l,"toString",s)}}},44262:(t,e,r)=>{var n=r(68726),i=r(99418),a=n("keys");t.exports=function(t){return a[t]||(a[t]=i(t))}},63030:(t,e,r)=>{var n=r(21899),i=r(4911),a="__core-js_shared__",o=n[a]||i(a,{});t.exports=o},68726:(t,e,r)=>{var n=r(82529),i=r(63030);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.10.2",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},70487:(t,e,r)=>{var n=r(96059),i=r(33916),a=r(99813)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[a])?e:i(r)}},64620:(t,e,r)=>{var n=r(68459),i=r(48219),a=function(t){return function(e,r){var a,o,s=String(i(e)),u=n(r),c=s.length;return u<0||u>=c?t?"":void 0:(a=s.charCodeAt(u))<55296||a>56319||u+1===c||(o=s.charCodeAt(u+1))<56320||o>57343?t?s.charAt(u):a:t?s.slice(u,u+2):o-56320+(a-55296<<10)+65536}};t.exports={codeAt:a(!1),charAt:a(!0)}},93093:(t,e,r)=>{var n=r(95981),i=r(73483);t.exports=function(t){return n((function(){return!!i[t]()||"​᠎"!="​᠎"[t]()||i[t].name!==t}))}},74853:(t,e,r)=>{var n=r(48219),i="["+r(73483)+"]",a=RegExp("^"+i+i+"*"),o=RegExp(i+i+"*$"),s=function(t){return function(e){var r=String(n(e));return 1&t&&(r=r.replace(a,"")),2&t&&(r=r.replace(o,"")),r}};t.exports={start:s(1),end:s(2),trim:s(3)}},42941:(t,e,r)=>{var n,i,a,o=r(21899),s=r(95981),u=r(86843),c=r(15463),l=r(61333),f=r(22749),h=r(6049),p=o.location,v=o.setImmediate,y=o.clearImmediate,g=o.process,d=o.MessageChannel,m=o.Dispatch,x=0,b={},S=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){S(t)}},A=function(t){S(t.data)},k=function(t){o.postMessage(t+"",p.protocol+"//"+p.host)};v&&y||(v=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return b[++x]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(x),x},y=function(t){delete b[t]},h?n=function(t){g.nextTick(w(t))}:m&&m.now?n=function(t){m.now(w(t))}:d&&!f?(a=(i=new d).port2,i.port1.onmessage=A,n=u(a.postMessage,a,1)):o.addEventListener&&"function"==typeof postMessage&&!o.importScripts&&p&&"file:"!==p.protocol&&!s(k)?(n=k,o.addEventListener("message",A,!1)):n="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),S(t)}}:function(t){setTimeout(w(t),0)}),t.exports={set:v,clear:y}},59413:(t,e,r)=>{var n=r(68459),i=Math.max,a=Math.min;t.exports=function(t,e){var r=n(t);return r<0?i(r+e,0):a(r,e)}},74529:(t,e,r)=>{var n=r(37026),i=r(48219);t.exports=function(t){return n(i(t))}},68459:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},43057:(t,e,r)=>{var n=r(68459),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},89678:(t,e,r)=>{var n=r(48219);t.exports=function(t){return Object(n(t))}},46935:(t,e,r)=>{var n=r(10941);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},22885:(t,e,r)=>{var n={};n[r(99813)("toStringTag")]="z",t.exports="[object z]"===String(n)},99418:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},32302:(t,e,r)=>{var n=r(72497);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},11477:(t,e,r)=>{var n=r(99813);e.f=n},99813:(t,e,r)=>{var n=r(21899),i=r(68726),a=r(47457),o=r(99418),s=r(72497),u=r(32302),c=i("wks"),l=n.Symbol,f=u?l:l&&l.withoutSetter||o;t.exports=function(t){return a(c,t)&&(s||"string"==typeof c[t])||(s&&a(l,t)?c[t]=l[t]:c[t]=f("Symbol."+t)),c[t]}},73483:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},47627:(t,e,r)=>{"use strict";var n=r(76887),i=r(249),a=r(88929),o=r(29290),s=r(32029),u=r(31887),c=r(93091),l=function(t,e){var r=this;if(!(r instanceof l))return new l(t,e);a&&(r=a(new Error(void 0),i(r))),void 0!==e&&s(r,"message",String(e));var n=[];return c(t,n.push,{that:n}),s(r,"errors",n),r};l.prototype=o(Error.prototype,{constructor:u(5,l),message:u(5,""),name:u(5,"AggregateError")}),n({global:!0},{AggregateError:l})},85906:(t,e,r)=>{"use strict";var n=r(76887),i=r(95981),a=r(1052),o=r(10941),s=r(89678),u=r(43057),c=r(55449),l=r(64692),f=r(50568),h=r(99813),p=r(53385),v=h("isConcatSpreadable"),y=9007199254740991,g="Maximum allowed index exceeded",d=p>=51||!i((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),m=f("concat"),x=function(t){if(!o(t))return!1;var e=t[v];return void 0!==e?!!e:a(t)};n({target:"Array",proto:!0,forced:!d||!m},{concat:function(t){var e,r,n,i,a,o=s(this),f=l(o,0),h=0;for(e=-1,n=arguments.length;e<n;e++)if(x(a=-1===e?o:arguments[e])){if(h+(i=u(a.length))>y)throw TypeError(g);for(r=0;r<i;r++,h++)r in a&&c(f,h,a[r])}else{if(h>=y)throw TypeError(g);c(f,h++,a)}return f.length=h,f}})},48851:(t,e,r)=>{"use strict";var n=r(76887),i=r(3610).every;n({target:"Array",proto:!0,forced:!r(34194)("every")},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},80290:(t,e,r)=>{var n=r(76887),i=r(91860),a=r(18479);n({target:"Array",proto:!0},{fill:i}),a("fill")},21501:(t,e,r)=>{"use strict";var n=r(76887),i=r(3610).filter;n({target:"Array",proto:!0,forced:!r(50568)("filter")},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},2437:(t,e,r)=>{"use strict";var n=r(76887),i=r(56837);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},53242:(t,e,r)=>{var n=r(76887),i=r(11354);n({target:"Array",stat:!0,forced:!r(21385)((function(t){Array.from(t)}))},{from:i})},97690:(t,e,r)=>{"use strict";var n=r(76887),i=r(31692).includes,a=r(18479);n({target:"Array",proto:!0},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),a("includes")},99076:(t,e,r)=>{"use strict";var n=r(76887),i=r(31692).indexOf,a=r(34194),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0,u=a("indexOf");n({target:"Array",proto:!0,forced:s||!u},{indexOf:function(t){return s?o.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},92737:(t,e,r)=>{r(76887)({target:"Array",stat:!0},{isArray:r(1052)})},66274:(t,e,r)=>{"use strict";var n=r(74529),i=r(18479),a=r(12077),o=r(45402),s=r(47771),u="Array Iterator",c=o.set,l=o.getterFor(u);t.exports=s(Array,"Array",(function(t,e){c(this,{type:u,target:n(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),a.Arguments=a.Array,i("keys"),i("values"),i("entries")},68787:(t,e,r)=>{"use strict";var n=r(76887),i=r(3610).map;n({target:"Array",proto:!0,forced:!r(50568)("map")},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},81876:(t,e,r)=>{"use strict";var n=r(76887),i=r(46499).left,a=r(34194),o=r(53385),s=r(6049);n({target:"Array",proto:!0,forced:!a("reduce")||!s&&o>79&&o<83},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},11490:(t,e,r)=>{"use strict";var n=r(76887),i=r(1052),a=[].reverse,o=[1,2];n({target:"Array",proto:!0,forced:String(o)===String(o.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),a.call(this)}})},60186:(t,e,r)=>{"use strict";var n=r(76887),i=r(10941),a=r(1052),o=r(59413),s=r(43057),u=r(74529),c=r(55449),l=r(99813),f=r(50568)("slice"),h=l("species"),p=[].slice,v=Math.max;n({target:"Array",proto:!0,forced:!f},{slice:function(t,e){var r,n,l,f=u(this),y=s(f.length),g=o(t,y),d=o(void 0===e?y:e,y);if(a(f)&&("function"!=typeof(r=f.constructor)||r!==Array&&!a(r.prototype)?i(r)&&null===(r=r[h])&&(r=void 0):r=void 0,r===Array||void 0===r))return p.call(f,g,d);for(n=new(void 0===r?Array:r)(v(d-g,0)),l=0;g<d;g++,l++)g in f&&c(n,l,f[g]);return n.length=l,n}})},66960:(t,e,r)=>{"use strict";var n=r(76887),i=r(3610).some;n({target:"Array",proto:!0,forced:!r(34194)("some")},{some:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},95160:(t,e,r)=>{r(76887)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},73381:(t,e,r)=>{r(76887)({target:"Function",proto:!0},{bind:r(98308)})},69120:(t,e,r)=>{var n=r(21899);r(90904)(n.JSON,"JSON",!0)},37501:(t,e,r)=>{"use strict";var n=r(24683),i=r(85616);t.exports=n("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},79413:()=>{},53882:(t,e,r)=>{r(76887)({target:"Object",stat:!0,sham:!r(55746)},{create:r(29290)})},74979:(t,e,r)=>{var n=r(76887),i=r(55746);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:r(59938)})},86450:(t,e,r)=>{var n=r(76887),i=r(55746);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:r(65988).f})},46924:(t,e,r)=>{var n=r(76887),i=r(95981),a=r(74529),o=r(49677).f,s=r(55746),u=i((function(){o(1)}));n({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return o(a(t),e)}})},88482:(t,e,r)=>{var n=r(76887),i=r(55746),a=r(31136),o=r(74529),s=r(49677),u=r(55449);n({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,r,n=o(t),i=s.f,c=a(n),l={},f=0;c.length>f;)void 0!==(r=i(n,e=c[f++]))&&u(l,e,r);return l}})},17405:(t,e,r)=>{var n=r(76887),i=r(95981),a=r(89678),o=r(249),s=r(64160);n({target:"Object",stat:!0,forced:i((function(){o(1)})),sham:!s},{getPrototypeOf:function(t){return o(a(t))}})},21724:(t,e,r)=>{var n=r(76887),i=r(89678),a=r(14771);n({target:"Object",stat:!0,forced:r(95981)((function(){a(1)}))},{keys:function(t){return a(i(t))}})},90108:(t,e,r)=>{r(76887)({target:"Object",stat:!0},{setPrototypeOf:r(88929)})},55967:()=>{},49718:(t,e,r)=>{var n=r(76887),i=r(81942);n({global:!0,forced:parseFloat!=i},{parseFloat:i})},14038:(t,e,r)=>{var n=r(76887),i=r(29806);n({global:!0,forced:parseInt!=i},{parseInt:i})},4560:(t,e,r)=>{"use strict";var n=r(76887),i=r(33916),a=r(69520),o=r(40002),s=r(93091);n({target:"Promise",stat:!0},{allSettled:function(t){var e=this,r=a.f(e),n=r.resolve,u=r.reject,c=o((function(){var r=i(e.resolve),a=[],o=0,u=1;s(t,(function(t){var i=o++,s=!1;a.push(void 0),u++,r.call(e,t).then((function(t){s||(s=!0,a[i]={status:"fulfilled",value:t},--u||n(a))}),(function(t){s||(s=!0,a[i]={status:"rejected",reason:t},--u||n(a))}))})),--u||n(a)}));return c.error&&u(c.value),r.promise}})},91302:(t,e,r)=>{"use strict";var n=r(76887),i=r(33916),a=r(626),o=r(69520),s=r(40002),u=r(93091),c="No one promise resolved";n({target:"Promise",stat:!0},{any:function(t){var e=this,r=o.f(e),n=r.resolve,l=r.reject,f=s((function(){var r=i(e.resolve),o=[],s=0,f=1,h=!1;u(t,(function(t){var i=s++,u=!1;o.push(void 0),f++,r.call(e,t).then((function(t){u||h||(h=!0,n(t))}),(function(t){u||h||(u=!0,o[i]=t,--f||l(new(a("AggregateError"))(o,c)))}))})),--f||l(new(a("AggregateError"))(o,c))}));return f.error&&l(f.value),r.promise}})},44349:(t,e,r)=>{"use strict";var n=r(76887),i=r(82529),a=r(19297),o=r(95981),s=r(626),u=r(70487),c=r(56584),l=r(99754);n({target:"Promise",proto:!0,real:!0,forced:!!a&&o((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=u(this,s("Promise")),r="function"==typeof t;return this.then(r?function(r){return c(e,t()).then((function(){return r}))}:t,r?function(r){return c(e,t()).then((function(){throw r}))}:t)}}),i||"function"!=typeof a||a.prototype.finally||l(a.prototype,"finally",s("Promise").prototype.finally)},98881:(t,e,r)=>{"use strict";var n,i,a,o,s=r(76887),u=r(82529),c=r(21899),l=r(626),f=r(19297),h=r(99754),p=r(87524),v=r(90904),y=r(94431),g=r(10941),d=r(33916),m=r(5743),x=r(81302),b=r(93091),S=r(21385),w=r(70487),A=r(42941).set,k=r(66132),T=r(56584),P=r(34845),O=r(69520),C=r(40002),E=r(45402),M=r(37252),N=r(99813),R=r(6049),_=r(53385),V=N("species"),D="Promise",I=E.get,L=E.set,z=E.getterFor(D),j=f,F=c.TypeError,B=c.document,U=c.process,H=l("fetch"),X=O.f,Y=X,q=!!(B&&B.createEvent&&c.dispatchEvent),Q="function"==typeof PromiseRejectionEvent,W="unhandledrejection",G=M(D,(function(){if(x(j)===String(j)){if(66===_)return!0;if(!R&&!Q)return!0}if(u&&!j.prototype.finally)return!0;if(_>=51&&/native code/.test(j))return!1;var t=j.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[V]=e,!(t.then((function(){}))instanceof e)})),$=G||!S((function(t){j.all(t).catch((function(){}))})),Z=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},K=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;k((function(){for(var n=t.value,i=1==t.state,a=0;r.length>a;){var o,s,u,c=r[a++],l=i?c.ok:c.fail,f=c.resolve,h=c.reject,p=c.domain;try{l?(i||(2===t.rejection&&rt(t),t.rejection=1),!0===l?o=n:(p&&p.enter(),o=l(n),p&&(p.exit(),u=!0)),o===c.promise?h(F("Promise-chain cycle")):(s=Z(o))?s.call(o,f,h):f(o)):h(n)}catch(t){p&&!u&&p.exit(),h(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&tt(t)}))}},J=function(t,e,r){var n,i;q?((n=B.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),c.dispatchEvent(n)):n={promise:e,reason:r},!Q&&(i=c["on"+t])?i(n):t===W&&P("Unhandled promise rejection",r)},tt=function(t){A.call(c,(function(){var e,r=t.facade,n=t.value;if(et(t)&&(e=C((function(){R?U.emit("unhandledRejection",n,r):J(W,r,n)})),t.rejection=R||et(t)?2:1,e.error))throw e.value}))},et=function(t){return 1!==t.rejection&&!t.parent},rt=function(t){A.call(c,(function(){var e=t.facade;R?U.emit("rejectionHandled",e):J("rejectionhandled",e,t.value)}))},nt=function(t,e,r){return function(n){t(e,n,r)}},it=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,K(t,!0))},at=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw F("Promise can't be resolved itself");var n=Z(e);n?k((function(){var r={done:!1};try{n.call(e,nt(at,r,t),nt(it,r,t))}catch(e){it(r,e,t)}})):(t.value=e,t.state=1,K(t,!1))}catch(e){it({done:!1},e,t)}}};G&&(j=function(t){m(this,j,D),d(t),n.call(this);var e=I(this);try{t(nt(at,e),nt(it,e))}catch(t){it(e,t)}},(n=function(t){L(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(j.prototype,{then:function(t,e){var r=z(this),n=X(w(this,j));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=R?U.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&K(r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n,e=I(t);this.promise=t,this.resolve=nt(at,e),this.reject=nt(it,e)},O.f=X=function(t){return t===j||t===a?new i(t):Y(t)},u||"function"!=typeof f||(o=f.prototype.then,h(f.prototype,"then",(function(t,e){var r=this;return new j((function(t,e){o.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof H&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return T(j,H.apply(c,arguments))}}))),s({global:!0,wrap:!0,forced:G},{Promise:j}),v(j,D,!1,!0),y(D),a=l(D),s({target:D,stat:!0,forced:G},{reject:function(t){var e=X(this);return e.reject.call(void 0,t),e.promise}}),s({target:D,stat:!0,forced:u||G},{resolve:function(t){return T(u&&this===a?j:this,t)}}),s({target:D,stat:!0,forced:$},{all:function(t){var e=this,r=X(e),n=r.resolve,i=r.reject,a=C((function(){var r=d(e.resolve),a=[],o=0,s=1;b(t,(function(t){var u=o++,c=!1;a.push(void 0),s++,r.call(e,t).then((function(t){c||(c=!0,a[u]=t,--s||n(a))}),i)})),--s||n(a)}));return a.error&&i(a.value),r.promise},race:function(t){var e=this,r=X(e),n=r.reject,i=C((function(){var i=d(e.resolve);b(t,(function(t){i.call(e,t).then(r.resolve,n)}))}));return i.error&&n(i.value),r.promise}})},46160:(t,e,r)=>{var n=r(76887),i=r(626),a=r(33916),o=r(96059),s=r(95981),u=i("Reflect","apply"),c=Function.apply;n({target:"Reflect",stat:!0,forced:!s((function(){u((function(){}))}))},{apply:function(t,e,r){return a(t),o(r),u?u(t,e,r):c.call(t,e,r)}})},7453:(t,e,r)=>{var n=r(76887),i=r(626),a=r(33916),o=r(96059),s=r(10941),u=r(29290),c=r(98308),l=r(95981),f=i("Reflect","construct"),h=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),p=!l((function(){f((function(){}))})),v=h||p;n({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(t,e){a(t),o(e);var r=arguments.length<3?t:a(arguments[2]);if(p&&!h)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(c.apply(t,n))}var i=r.prototype,l=u(s(i)?i:Object.prototype),v=Function.apply.call(t,l,e);return s(v)?v:l}})},2079:(t,e,r)=>{var n=r(76887),i=r(96059),a=r(49677).f;n({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var r=a(i(t),e);return!(r&&!r.configurable)&&delete t[e]}})},13593:(t,e,r)=>{var n=r(76887),i=r(96059),a=r(249);n({target:"Reflect",stat:!0,sham:!r(64160)},{getPrototypeOf:function(t){return a(i(t))}})},42355:(t,e,r)=>{var n=r(76887),i=r(10941),a=r(96059),o=r(47457),s=r(49677),u=r(249);n({target:"Reflect",stat:!0},{get:function t(e,r){var n,c,l=arguments.length<3?e:arguments[2];return a(e)===l?e[r]:(n=s.f(e,r))?o(n,"value")?n.value:void 0===n.get?void 0:n.get.call(l):i(c=u(e))?t(c,r,l):void 0}})},1502:()=>{},11035:(t,e,r)=>{"use strict";var n=r(76887),i=r(70344),a=r(48219);n({target:"String",proto:!0,forced:!r(67772)("includes")},{includes:function(t){return!!~String(a(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},77971:(t,e,r)=>{"use strict";var n=r(64620).charAt,i=r(45402),a=r(47771),o="String Iterator",s=i.set,u=i.getterFor(o);a(String,"String",(function(t){s(this,{type:o,string:String(t),index:0})}),(function(){var t,e=u(this),r=e.string,i=e.index;return i>=r.length?{value:void 0,done:!0}:(t=n(r,i),e.index+=t.length,{value:t,done:!1})}))},94761:(t,e,r)=>{"use strict";var n,i=r(76887),a=r(49677).f,o=r(43057),s=r(70344),u=r(48219),c=r(67772),l=r(82529),f="".startsWith,h=Math.min,p=c("startsWith");i({target:"String",proto:!0,forced:!(!l&&!p&&(n=a(String.prototype,"startsWith"),n&&!n.writable)||p)},{startsWith:function(t){var e=String(u(this));s(t);var r=o(h(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return f?f.call(e,n,r):e.slice(r,r+n.length)===n}})},57398:(t,e,r)=>{"use strict";var n=r(76887),i=r(74853).trim;n({target:"String",proto:!0,forced:r(93093)("trim")},{trim:function(){return i(this)}})},8555:(t,e,r)=>{r(66349)("asyncIterator")},52615:()=>{},21732:(t,e,r)=>{r(66349)("hasInstance")},35903:(t,e,r)=>{r(66349)("isConcatSpreadable")},1825:(t,e,r)=>{r(66349)("iterator")},35824:(t,e,r)=>{"use strict";var n=r(76887),i=r(21899),a=r(626),o=r(82529),s=r(55746),u=r(72497),c=r(32302),l=r(95981),f=r(47457),h=r(1052),p=r(10941),v=r(96059),y=r(89678),g=r(74529),d=r(46935),m=r(31887),x=r(29290),b=r(14771),S=r(10946),w=r(684),A=r(87857),k=r(49677),T=r(65988),P=r(36760),O=r(32029),C=r(99754),E=r(68726),M=r(44262),N=r(27748),R=r(99418),_=r(99813),V=r(11477),D=r(66349),I=r(90904),L=r(45402),z=r(3610).forEach,j=M("hidden"),F="Symbol",B=_("toPrimitive"),U=L.set,H=L.getterFor(F),X=Object.prototype,Y=i.Symbol,q=a("JSON","stringify"),Q=k.f,W=T.f,G=w.f,$=P.f,Z=E("symbols"),K=E("op-symbols"),J=E("string-to-symbol-registry"),tt=E("symbol-to-string-registry"),et=E("wks"),rt=i.QObject,nt=!rt||!rt.prototype||!rt.prototype.findChild,it=s&&l((function(){return 7!=x(W({},"a",{get:function(){return W(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=Q(X,e);n&&delete X[e],W(t,e,r),n&&t!==X&&W(X,e,n)}:W,at=function(t,e){var r=Z[t]=x(Y.prototype);return U(r,{type:F,tag:t,description:e}),s||(r.description=e),r},ot=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof Y},st=function(t,e,r){t===X&&st(K,e,r),v(t);var n=d(e,!0);return v(r),f(Z,n)?(r.enumerable?(f(t,j)&&t[j][n]&&(t[j][n]=!1),r=x(r,{enumerable:m(0,!1)})):(f(t,j)||W(t,j,m(1,{})),t[j][n]=!0),it(t,n,r)):W(t,n,r)},ut=function(t,e){v(t);var r=g(e),n=b(r).concat(ht(r));return z(n,(function(e){s&&!ct.call(r,e)||st(t,e,r[e])})),t},ct=function(t){var e=d(t,!0),r=$.call(this,e);return!(this===X&&f(Z,e)&&!f(K,e))&&(!(r||!f(this,e)||!f(Z,e)||f(this,j)&&this[j][e])||r)},lt=function(t,e){var r=g(t),n=d(e,!0);if(r!==X||!f(Z,n)||f(K,n)){var i=Q(r,n);return!i||!f(Z,n)||f(r,j)&&r[j][n]||(i.enumerable=!0),i}},ft=function(t){var e=G(g(t)),r=[];return z(e,(function(t){f(Z,t)||f(N,t)||r.push(t)})),r},ht=function(t){var e=t===X,r=G(e?K:g(t)),n=[];return z(r,(function(t){!f(Z,t)||e&&!f(X,t)||n.push(Z[t])})),n};u||(C((Y=function(){if(this instanceof Y)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=R(t),r=function(t){this===X&&r.call(K,t),f(this,j)&&f(this[j],e)&&(this[j][e]=!1),it(this,e,m(1,t))};return s&&nt&&it(X,e,{configurable:!0,set:r}),at(e,t)}).prototype,"toString",(function(){return H(this).tag})),C(Y,"withoutSetter",(function(t){return at(R(t),t)})),P.f=ct,T.f=st,k.f=lt,S.f=w.f=ft,A.f=ht,V.f=function(t){return at(_(t),t)},s&&(W(Y.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),o||C(X,"propertyIsEnumerable",ct,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:Y}),z(b(et),(function(t){D(t)})),n({target:F,stat:!0,forced:!u},{for:function(t){var e=String(t);if(f(J,e))return J[e];var r=Y(e);return J[e]=r,tt[r]=e,r},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(f(tt,t))return tt[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(t,e){return void 0===e?x(t):ut(x(t),e)},defineProperty:st,defineProperties:ut,getOwnPropertyDescriptor:lt}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ft,getOwnPropertySymbols:ht}),n({target:"Object",stat:!0,forced:l((function(){A.f(1)}))},{getOwnPropertySymbols:function(t){return A.f(y(t))}}),q&&n({target:"JSON",stat:!0,forced:!u||l((function(){var t=Y();return"[null]"!=q([t])||"{}"!=q({a:t})||"{}"!=q(Object(t))}))},{stringify:function(t,e,r){for(var n,i=[t],a=1;arguments.length>a;)i.push(arguments[a++]);if(n=e,(p(e)||void 0!==t)&&!ot(t))return h(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!ot(e))return e}),i[1]=e,q.apply(null,i)}}),Y.prototype[B]||O(Y.prototype,B,Y.prototype.valueOf),I(Y,F),N[j]=!0},45915:(t,e,r)=>{r(66349)("matchAll")},28394:(t,e,r)=>{r(66349)("match")},61766:(t,e,r)=>{r(66349)("replace")},62737:(t,e,r)=>{r(66349)("search")},89911:(t,e,r)=>{r(66349)("species")},74315:(t,e,r)=>{r(66349)("split")},63131:(t,e,r)=>{r(66349)("toPrimitive")},64714:(t,e,r)=>{r(66349)("toStringTag")},70659:(t,e,r)=>{r(66349)("unscopables")},89731:(t,e,r)=>{r(47627)},55708:(t,e,r)=>{r(4560)},88731:(t,e,r)=>{r(91302)},30014:(t,e,r)=>{"use strict";var n=r(76887),i=r(69520),a=r(40002);n({target:"Promise",stat:!0},{try:function(t){var e=i.f(this),r=a(t);return(r.error?e.reject:e.resolve)(r.value),e.promise}})},28783:(t,e,r)=>{r(66349)("asyncDispose")},43975:(t,e,r)=>{r(66349)("dispose")},46774:(t,e,r)=>{r(66349)("observable")},80620:(t,e,r)=>{r(66349)("patternMatch")},36172:(t,e,r)=>{r(66349)("replaceAll")},7634:(t,e,r)=>{r(66274);var n=r(63281),i=r(21899),a=r(9697),o=r(32029),s=r(12077),u=r(99813)("toStringTag");for(var c in n){var l=i[c],f=l&&l.prototype;f&&a(f)!==u&&o(f,u,c),s[c]=s.Array}},27698:(t,e,r)=>{var n=r(54493);t.exports=n},83363:(t,e,r)=>{var n=r(24034);t.exports=n},49216:(t,e,r)=>{var n=r(99324);t.exports=n},74719:(t,e,r)=>{var n=r(14423);t.exports=n},57784:(t,e,r)=>{var n=r(81103);t.exports=n},28196:(t,e,r)=>{var n=r(16246);t.exports=n},8065:(t,e,r)=>{var n=r(56043);t.exports=n},29455:(t,e,r)=>{var n=r(13160);t.exports=n},69743:(t,e,r)=>{var n=r(80446);t.exports=n},11955:(t,e,r)=>{var n=r(2480);t.exports=n},46279:(t,e,r)=>{r(7634);var n=r(49216),i=r(9697),a=Array.prototype,o={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.forEach;return t===a||t instanceof Array&&e===a.forEach||o.hasOwnProperty(i(t))?n:e}},33778:(t,e,r)=>{var n=r(58557);t.exports=n},19373:(t,e,r)=>{var n=r(34570);t.exports=n},61798:(t,e,r)=>{var n=r(88287);t.exports=n},52527:(t,e,r)=>{var n=r(68025);t.exports=n},28427:(t,e,r)=>{var n=r(91060);t.exports=n},82073:(t,e,r)=>{var n=r(69601);t.exports=n},45286:(t,e,r)=>{var n=r(28299);t.exports=n},35178:(t,e,r)=>{var n=r(71611);t.exports=n},76361:(t,e,r)=>{var n=r(62774);t.exports=n},62908:(t,e,r)=>{r(7634);var n=r(74719),i=r(9697),a=Array.prototype,o={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.values;return t===a||t instanceof Array&&e===a.values||o.hasOwnProperty(i(t))?n:e}},15868:(t,e,r)=>{var n=r(91018);t.exports=n},57396:(t,e,r)=>{var n=r(7702);t.exports=n},41910:(t,e,r)=>{var n=r(48171);t.exports=n},79427:(t,e,r)=>{var n=r(286);t.exports=n},62857:(t,e,r)=>{var n=r(92766);t.exports=n},9534:(t,e,r)=>{var n=r(30498);t.exports=n},23059:(t,e,r)=>{var n=r(48494);t.exports=n},66877:(t,e,r)=>{var n=r(7579);t.exports=n},74888:(t,e,r)=>{var n=r(98524);t.exports=n},27460:(t,e,r)=>{var n=r(52956);t.exports=n},5889:(t,e,r)=>{var n=r(6238);t.exports=n},61895:(t,e,r)=>{var n=r(14983);t.exports=n},50636:(t,e,r)=>{var n=r(74734);t.exports=n},92388:(t,e,r)=>{var n=r(61189);t.exports=n},92547:(t,e,r)=>{var n=r(57473);t.exports=n},75:function(t){(function(){var e,r,n,i,a,o;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(t.exports=function(){return(e()-a)/1e6},r=process.hrtime,i=(e=function(){var t;return 1e9*(t=r())[0]+t[1]})(),o=1e9*process.uptime(),a=i-o):Date.now?(t.exports=function(){return Date.now()-n},n=Date.now()):(t.exports=function(){return(new Date).getTime()-n},n=(new Date).getTime())}).call(this)},54087:(t,e,r)=>{for(var n=r(75),i="undefined"==typeof window?r.g:window,a=["moz","webkit"],o="AnimationFrame",s=i["request"+o],u=i["cancel"+o]||i["cancelRequest"+o],c=0;!s&&c<a.length;c++)s=i[a[c]+"Request"+o],u=i[a[c]+"Cancel"+o]||i[a[c]+"CancelRequest"+o];if(!s||!u){var l=0,f=0,h=[];s=function(t){if(0===h.length){var e=n(),r=Math.max(0,16.666666666666668-(e-l));l=r+e,setTimeout((function(){var t=h.slice(0);h.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(l)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return h.push({handle:++f,callback:t,cancelled:!1}),f},u=function(t){for(var e=0;e<h.length;e++)h[e].handle===t&&(h[e].cancelled=!0)}}t.exports=function(t){return s.call(i,t)},t.exports.cancel=function(){u.apply(i,arguments)},t.exports.polyfill=function(t){t||(t=i),t.requestAnimationFrame=s,t.cancelAnimationFrame=u}},26131:t=>{t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],n=0;n<r.length;n++){var i=r[n].re,a=r[n].process,o=i.exec(t);if(o){var s=a(o);this.r=s[0],this.g=s[1],this.b=s[2],s.length>3&&(this.alpha=s[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,n=0;n<r.length;n++)for(var i=r[n].example,a=0;a<i.length;a++)t[t.length]=i[a];for(var o in e)t[t.length]=o;var s=document.createElement("ul");for(s.setAttribute("id","rgbcolor-examples"),n=0;n<t.length;n++)try{var u=document.createElement("li"),c=new RGBColor(t[n]),l=document.createElement("div");l.style.cssText="margin: 3px; border: 1px solid black; background:"+c.toHex()+"; color:"+c.toHex(),l.appendChild(document.createTextNode("test"));var f=document.createTextNode(" "+t[n]+" -> "+c.toRGB()+" -> "+c.toHex());u.appendChild(l),u.appendChild(f),s.appendChild(u)}catch(t){}return s}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,